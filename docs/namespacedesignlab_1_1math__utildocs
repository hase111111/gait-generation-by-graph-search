<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>GaitGeneration by Graph Search: designlab::math_util 名前空間</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">GaitGeneration by Graph Search
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- 構築: Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'docs');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','検索');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('namespacedesignlab_1_1math__utildocs',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">読み取り中…</div>
<div class="SRStatus" id="Searching">検索中…</div>
<div class="SRStatus" id="NoMatches">一致する文字列を見つけられません</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#concepts">Concepts</a> &#124;
<a href="#func-members">関数</a> &#124;
<a href="#var-members">変数</a>  </div>
  <div class="headertitle"><div class="title">designlab::math_util 名前空間</div></div>
</div><!--header-->
<div class="contents">

<p>基本的な計算を行う関数をまとめた名前空間．  
<a href="namespacedesignlab_1_1math__utildocs#details">[詳解]</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="concepts" name="concepts"></a>
Concepts</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptdesignlab_1_1math__util_1_1_arithmeticdocs">Arithmetic</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
関数</h2></td></tr>
<tr class="memitem:a92c055e0799991e88871e2a5d4f09280" id="r_a92c055e0799991e88871e2a5d4f09280"><td class="memTemplParams" colspan="2">template&lt;::std::floating_point T&gt; </td></tr>
<tr class="memitem:a92c055e0799991e88871e2a5d4f09280"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedesignlab_1_1math__utildocs#a92c055e0799991e88871e2a5d4f09280">IsEqual</a> (const T num1, const T num2) noexcept</td></tr>
<tr class="memdesc:a92c055e0799991e88871e2a5d4f09280"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++において，小数同士の計算は誤差が出てしまう． 誤差込みで値が等しいか調べる．  <br /></td></tr>
<tr class="separator:a92c055e0799991e88871e2a5d4f09280"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1263c8ff431181d677fad31e8c96db5" id="r_ac1263c8ff431181d677fad31e8c96db5"><td class="memTemplParams" colspan="2">template&lt;Arithmetic T&gt; </td></tr>
<tr class="memitem:ac1263c8ff431181d677fad31e8c96db5"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedesignlab_1_1math__utildocs#ac1263c8ff431181d677fad31e8c96db5">Squared</a> (const T num) noexcept</td></tr>
<tr class="memdesc:ac1263c8ff431181d677fad31e8c96db5"><td class="mdescLeft">&#160;</td><td class="mdescRight">2乗した値を返す関数．  <br /></td></tr>
<tr class="separator:ac1263c8ff431181d677fad31e8c96db5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3348e7fb941d17865e0077f24d1e772a" id="r_a3348e7fb941d17865e0077f24d1e772a"><td class="memTemplParams" colspan="2">template&lt;Arithmetic T&gt; </td></tr>
<tr class="memitem:a3348e7fb941d17865e0077f24d1e772a"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedesignlab_1_1math__utildocs#a3348e7fb941d17865e0077f24d1e772a">CanMakeTriangle</a> (const T a, const T b, const T c) noexcept</td></tr>
<tr class="memdesc:a3348e7fb941d17865e0077f24d1e772a"><td class="mdescLeft">&#160;</td><td class="mdescRight">3辺で三角形が作れるか調べる関数．  <br /></td></tr>
<tr class="separator:a3348e7fb941d17865e0077f24d1e772a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bb65d79aff7212b0ea64882f22b9b1b" id="r_a0bb65d79aff7212b0ea64882f22b9b1b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0bb65d79aff7212b0ea64882f22b9b1b"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedesignlab_1_1math__utildocs#a0bb65d79aff7212b0ea64882f22b9b1b">ApproachTarget</a> (const T &amp;current, const T &amp;target, float rate)</td></tr>
<tr class="memdesc:a0bb65d79aff7212b0ea64882f22b9b1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">目標値に値を近づける関数． 描画用なので，線形でなく，適当に値を近づける． そのため，計算に使いたいなら作り直すこと．  <br /></td></tr>
<tr class="separator:a0bb65d79aff7212b0ea64882f22b9b1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4374f6439315f4043228252eecb07dfe" id="r_a4374f6439315f4043228252eecb07dfe"><td class="memTemplParams" colspan="2">template&lt;Arithmetic T&gt; </td></tr>
<tr class="memitem:a4374f6439315f4043228252eecb07dfe"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedesignlab_1_1math__utildocs#a4374f6439315f4043228252eecb07dfe">GenerateRandomNumber</a> (T min, T max)</td></tr>
<tr class="memdesc:a4374f6439315f4043228252eecb07dfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">指定した範囲内の乱数を生成する．  <br /></td></tr>
<tr class="separator:a4374f6439315f4043228252eecb07dfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58f03d996effdb034c9f644f0a6a76e5" id="r_a58f03d996effdb034c9f644f0a6a76e5"><td class="memTemplParams" colspan="2">template&lt;::std::floating_point T&gt; </td></tr>
<tr class="memitem:a58f03d996effdb034c9f644f0a6a76e5"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedesignlab_1_1math__utildocs#a58f03d996effdb034c9f644f0a6a76e5">ConvertRadToDeg</a> (const T rad) noexcept</td></tr>
<tr class="memdesc:a58f03d996effdb034c9f644f0a6a76e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">角度を [rad]から [deg] に変換する関数．  <br /></td></tr>
<tr class="separator:a58f03d996effdb034c9f644f0a6a76e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71ec8fe6a47e6e7618a53957fd0b8b10" id="r_a71ec8fe6a47e6e7618a53957fd0b8b10"><td class="memTemplParams" colspan="2">template&lt;::std::floating_point T&gt; </td></tr>
<tr class="memitem:a71ec8fe6a47e6e7618a53957fd0b8b10"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedesignlab_1_1math__utildocs#a71ec8fe6a47e6e7618a53957fd0b8b10">ConvertDegToRad</a> (const T deg) noexcept</td></tr>
<tr class="memdesc:a71ec8fe6a47e6e7618a53957fd0b8b10"><td class="mdescLeft">&#160;</td><td class="mdescRight">角度を [deg] から [rad] に変換する関数．  <br /></td></tr>
<tr class="separator:a71ec8fe6a47e6e7618a53957fd0b8b10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fa78cd94f2775be2e2416f25675f5f8" id="r_a0fa78cd94f2775be2e2416f25675f5f8"><td class="memTemplParams" colspan="2">template&lt;::std::floating_point T&gt; </td></tr>
<tr class="memitem:a0fa78cd94f2775be2e2416f25675f5f8"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedesignlab_1_1math__utildocs#a0fa78cd94f2775be2e2416f25675f5f8">LimitRangeAngleDeg</a> (T angle)</td></tr>
<tr class="memdesc:a0fa78cd94f2775be2e2416f25675f5f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">角度を -180° ～ 180° の範囲に収める関数．  <br /></td></tr>
<tr class="separator:a0fa78cd94f2775be2e2416f25675f5f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45276ca396d3aa1331b5bb5a4c849bbe" id="r_a45276ca396d3aa1331b5bb5a4c849bbe"><td class="memTemplParams" colspan="2">template&lt;::std::floating_point T&gt; </td></tr>
<tr class="memitem:a45276ca396d3aa1331b5bb5a4c849bbe"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacedesignlab_1_1math__utildocs#a45276ca396d3aa1331b5bb5a4c849bbe">FloatingPointNumToString</a> (const T num, const int digit=<a class="el" href="namespacedesignlab_1_1math__utildocs#a47a34b2c170edef572bff2c2c5fc933a">kDigit</a>, const int width=<a class="el" href="namespacedesignlab_1_1math__utildocs#ad81259f811d60d6096262f4c19cb5b48">kWidth</a>)</td></tr>
<tr class="memdesc:a45276ca396d3aa1331b5bb5a4c849bbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">小数を文字列に変換する関数． <br  />
 C++ では C のフォーマットのように %3.3f とかで小数を文字列に変換できないため自作する．  <br /></td></tr>
<tr class="separator:a45276ca396d3aa1331b5bb5a4c849bbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="var-members" name="var-members"></a>
変数</h2></td></tr>
<tr class="memitem:a47a34b2c170edef572bff2c2c5fc933a" id="r_a47a34b2c170edef572bff2c2c5fc933a"><td class="memItemLeft" align="right" valign="top"><a id="a47a34b2c170edef572bff2c2c5fc933a" name="a47a34b2c170edef572bff2c2c5fc933a"></a>
constexpr int&#160;</td><td class="memItemRight" valign="bottom"><b>kDigit</b> = 3</td></tr>
<tr class="memdesc:a47a34b2c170edef572bff2c2c5fc933a"><td class="mdescLeft">&#160;</td><td class="mdescRight">小数点以下の桁数． <br /></td></tr>
<tr class="separator:a47a34b2c170edef572bff2c2c5fc933a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad81259f811d60d6096262f4c19cb5b48" id="r_ad81259f811d60d6096262f4c19cb5b48"><td class="memItemLeft" align="right" valign="top"><a id="ad81259f811d60d6096262f4c19cb5b48" name="ad81259f811d60d6096262f4c19cb5b48"></a>
constexpr int&#160;</td><td class="memItemRight" valign="bottom"><b>kWidth</b> = 10</td></tr>
<tr class="memdesc:ad81259f811d60d6096262f4c19cb5b48"><td class="mdescLeft">&#160;</td><td class="mdescRight">文字列の幅． <br /></td></tr>
<tr class="separator:ad81259f811d60d6096262f4c19cb5b48"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">詳解</h2>
<div class="textblock"><p>基本的な計算を行う関数をまとめた名前空間． </p>
<p>この名前空間にある関数は，基本的に constexprである． そのため，コンパイル時に計算が行われる． </p>
</div><h2 class="groupheader">関数詳解</h2>
<a id="a0bb65d79aff7212b0ea64882f22b9b1b" name="a0bb65d79aff7212b0ea64882f22b9b1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0bb65d79aff7212b0ea64882f22b9b1b">&#9670;&#160;</a></span>ApproachTarget()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T designlab::math_util::ApproachTarget </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>current</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>rate</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>目標値に値を近づける関数． 描画用なので，線形でなく，適当に値を近づける． そのため，計算に使いたいなら作り直すこと． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">current</td><td>現在の値． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">target</td><td>目標値． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rate</td><td>近づける割合．0 ～ 1の値を取る． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>近づけた値． </dd></dl>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="namespacedesignlab_1_1math__util_a0bb65d79aff7212b0ea64882f22b9b1b_icgraph.png" border="0" usemap="#anamespacedesignlab_1_1math__util_a0bb65d79aff7212b0ea64882f22b9b1b_icgraph" alt=""/></div>
<map name="anamespacedesignlab_1_1math__util_a0bb65d79aff7212b0ea64882f22b9b1b_icgraph" id="anamespacedesignlab_1_1math__util_a0bb65d79aff7212b0ea64882f22b9b1b_icgraph">
<area shape="rect" title="目標値に値を近づける関数． 描画用なので，線形でなく，適当に値を近づける． そのため，計算に使いたいなら作り直すこと．" alt="" coords="216,5,353,48"/>
<area shape="rect" href="classdesignlab_1_1_simple_buttondocs#a457f013b6ca3c46f96c23a2946aeb2fa" title="GUIの更新，毎フレーム実行すること．" alt="" coords="5,5,168,48"/>
<area shape="poly" title=" " alt="" coords="200,29,168,29,168,24,200,24"/>
</map>
</div>

</div>
</div>
<a id="a3348e7fb941d17865e0077f24d1e772a" name="a3348e7fb941d17865e0077f24d1e772a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3348e7fb941d17865e0077f24d1e772a">&#9670;&#160;</a></span>CanMakeTriangle()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;Arithmetic T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool designlab::math_util::CanMakeTriangle </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>3辺で三角形が作れるか調べる関数． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>1辺目． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>2辺目． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">c</td><td>3辺目． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>三角形が作れるならば true． </dd></dl>

</div>
</div>
<a id="a71ec8fe6a47e6e7618a53957fd0b8b10" name="a71ec8fe6a47e6e7618a53957fd0b8b10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71ec8fe6a47e6e7618a53957fd0b8b10">&#9670;&#160;</a></span>ConvertDegToRad()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;::std::floating_point T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr T designlab::math_util::ConvertDegToRad </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>deg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>角度を [deg] から [rad] に変換する関数． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">deg</td><td>角度[deg]． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>角度[rad]． </dd></dl>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="namespacedesignlab_1_1math__util_a71ec8fe6a47e6e7618a53957fd0b8b10_icgraph.png" border="0" usemap="#anamespacedesignlab_1_1math__util_a71ec8fe6a47e6e7618a53957fd0b8b10_icgraph" alt=""/></div>
<map name="anamespacedesignlab_1_1math__util_a71ec8fe6a47e6e7618a53957fd0b8b10_icgraph" id="anamespacedesignlab_1_1math__util_a71ec8fe6a47e6e7618a53957fd0b8b10_icgraph">
<area shape="rect" title="角度を [deg] から [rad] に変換する関数．" alt="" coords="222,72,359,115"/>
<area shape="rect" href="classdesignlab_1_1_simulation_end_checker_factorydocs#a5efe7f1b9b7701783fa8245758d57daa" title="シミュレーションの終了を判定するクラスを生成する．" alt="" coords="5,5,174,48"/>
<area shape="poly" title=" " alt="" coords="209,69,155,51,157,46,211,64"/>
<area shape="rect" href="structdesignlab_1_1_euler_x_y_zdocs#a09e8c53ff0cea3cda90de0ff2140d7db" title="オイラー角を 単位[deg] で作成する．" alt="" coords="21,72,158,115"/>
<area shape="poly" title=" " alt="" coords="206,96,159,96,159,91,206,91"/>
<area shape="rect" href="structdesignlab_1_1_euler_x_y_zdocs#ae220f2dcab4743783a5e1436ff19d9e5" title="オイラー角を 単位 度 [deg] で初期化する．" alt="" coords="21,139,158,181"/>
<area shape="poly" title=" " alt="" coords="211,122,157,141,155,135,209,117"/>
</map>
</div>

</div>
</div>
<a id="a58f03d996effdb034c9f644f0a6a76e5" name="a58f03d996effdb034c9f644f0a6a76e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58f03d996effdb034c9f644f0a6a76e5">&#9670;&#160;</a></span>ConvertRadToDeg()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;::std::floating_point T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr T designlab::math_util::ConvertRadToDeg </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>rad</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>角度を [rad]から [deg] に変換する関数． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rad</td><td>単位 [rad]． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>単位 [deg]． </dd></dl>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="namespacedesignlab_1_1math__util_a58f03d996effdb034c9f644f0a6a76e5_icgraph.png" border="0" usemap="#anamespacedesignlab_1_1math__util_a58f03d996effdb034c9f644f0a6a76e5_icgraph" alt=""/></div>
<map name="anamespacedesignlab_1_1math__util_a58f03d996effdb034c9f644f0a6a76e5_icgraph" id="anamespacedesignlab_1_1math__util_a58f03d996effdb034c9f644f0a6a76e5_icgraph">
<area shape="rect" title="角度を [rad]から [deg] に変換する関数．" alt="" coords="191,5,328,48"/>
<area shape="rect" href="structdesignlab_1_1_euler_x_y_zdocs#a38d45f9caa4a81b2fb2277653a9b0abf" title="オイラー角を文字列に変換する． 単位は 度 [deg]．" alt="" coords="5,5,143,48"/>
<area shape="poly" title=" " alt="" coords="175,29,143,29,143,24,175,24"/>
</map>
</div>

</div>
</div>
<a id="a45276ca396d3aa1331b5bb5a4c849bbe" name="a45276ca396d3aa1331b5bb5a4c849bbe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45276ca396d3aa1331b5bb5a4c849bbe">&#9670;&#160;</a></span>FloatingPointNumToString()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;::std::floating_point T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::string designlab::math_util::FloatingPointNumToString </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>num</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>digit</em> = <code><a class="el" href="namespacedesignlab_1_1math__utildocs#a47a34b2c170edef572bff2c2c5fc933a">kDigit</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>width</em> = <code><a class="el" href="namespacedesignlab_1_1math__utildocs#ad81259f811d60d6096262f4c19cb5b48">kWidth</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>小数を文字列に変換する関数． <br  />
 C++ では C のフォーマットのように %3.3f とかで小数を文字列に変換できないため自作する． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num</td><td>変換する小数． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">digit</td><td>小数点以下の桁数． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>文字列の幅． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>変換した文字列． </dd></dl>
<dl class="tparams"><dt>テンプレート引数</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>float か double のみを想定している． その他の型を使用する場合エラーが出る． </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="namespacedesignlab_1_1math__util_a45276ca396d3aa1331b5bb5a4c849bbe_icgraph.png" border="0" usemap="#anamespacedesignlab_1_1math__util_a45276ca396d3aa1331b5bb5a4c849bbe_icgraph" alt=""/></div>
<map name="anamespacedesignlab_1_1math__util_a45276ca396d3aa1331b5bb5a4c849bbe_icgraph" id="anamespacedesignlab_1_1math__util_a45276ca396d3aa1331b5bb5a4c849bbe_icgraph">
<area shape="rect" title="小数を文字列に変換する関数． &#160;&#160;C++ では C のフォーマットのように %3.3f とかで小数を文字列に変換できないため自作する．" alt="" coords="754,368,935,411"/>
<area shape="rect" href="classdesignlab_1_1_stopwatchdocs#af9fb416303d9b2d98886dde84614c6a0" title="経過時間をマイクロ秒で表した文字列を取得する．" alt="" coords="499,5,706,48"/>
<area shape="poly" title=" " alt="" coords="835,353,822,290,798,212,781,171,760,132,734,95,705,62,689,51,692,47,708,58,739,91,764,129,786,169,803,210,828,289,841,352"/>
<area shape="rect" href="classdesignlab_1_1_stopwatchdocs#a51874446242f0ad0819837afb8036be7" title="経過時間をミリ秒で表した文字列を取得する．" alt="" coords="504,72,702,115"/>
<area shape="poly" title=" " alt="" coords="831,354,815,303,789,243,752,181,730,153,705,129,688,117,691,113,708,125,734,150,757,178,793,240,820,301,836,352"/>
<area shape="rect" href="classdesignlab_1_1_stopwatchdocs#a99e76970be9ab89db59d108f2318e554" title="経過時間を秒で表した文字列を取得する．" alt="" coords="512,139,694,181"/>
<area shape="poly" title=" " alt="" coords="825,355,805,318,778,275,745,232,705,195,686,184,689,180,708,191,748,228,783,272,810,315,830,353"/>
<area shape="rect" href="structdesignlab_1_1_graph_search_result_recorddocs#ab817d6534ee46d02492002e1966801e4" title="構造体の内容をCSV形式の文字列にして返す． , (カンマ) で区切られる．" alt="" coords="504,205,701,248"/>
<area shape="poly" title=" " alt="" coords="814,358,766,309,736,284,705,262,682,251,684,246,708,258,740,280,769,305,817,354"/>
<area shape="rect" href="structdesignlab_1_1_vector2docs#ab61d13f3a70dffabc8b3a066ab12d351" title="このベクトルをCSV形式の文字列にして返す． &#160;&#160;x, y, z の形式，小数点以下3桁まで．" alt="" coords="538,272,667,315"/>
<area shape="poly" title=" " alt="" coords="784,363,705,329,667,315,669,310,707,324,786,359"/>
<area shape="rect" href="structdesignlab_1_1_euler_x_y_zdocs#a78a88f2575844a56ee80417aee8bbe56" title="オイラー角を文字列に変換する． 単位は ラジアン [rad]" alt="" coords="534,339,671,381"/>
<area shape="poly" title=" " alt="" coords="739,379,671,371,672,366,739,374"/>
<area shape="rect" href="structdesignlab_1_1_polygon2docs#a310bb9599a9ef2b23581bafa7ede4327" title="多角形のデータを文字列で出力する" alt="" coords="292,427,431,469"/>
<area shape="poly" title=" " alt="" coords="739,405,431,442,431,437,738,399"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs#a37c43da43484613d050d79393feaecec" title="クォータニオンを文字列に変換する． &#160;&#160;w, x, y, z の順で出力する．" alt="" coords="529,589,676,632"/>
<area shape="poly" title=" " alt="" coords="829,426,808,462,781,503,747,544,708,580,678,596,675,591,705,575,744,540,777,500,804,459,824,423"/>
<area shape="rect" href="structdesignlab_1_1_rotation_matrix3x3docs#af5e9ca233c0e098436f82432e556d826" title="回転行列を文字列に変換する．" alt="" coords="508,523,697,565"/>
<area shape="poly" title=" " alt="" coords="816,424,768,470,708,513,684,525,681,520,705,508,764,466,812,420"/>
<area shape="rect" href="structdesignlab_1_1_vector2docs#a139b9e4be383a8910f0abdc44aff73a6" title="このベクトルを文字列にして返す． &#160;&#160;(x, y) の形式，小数点以下3桁まで．" alt="" coords="538,456,667,499"/>
<area shape="poly" title=" " alt="" coords="770,419,664,458,662,453,768,414"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#adced04a30051a7d7a5845a1d9a9d1c11" title="このベクトルを文字列にして返す． &#160;&#160;(x, y, z) の形式，小数点以下3桁まで．" alt="" coords="538,656,667,699"/>
<area shape="poly" title=" " alt="" coords="836,427,819,476,792,535,756,594,733,622,708,646,689,658,669,667,667,662,687,654,705,642,729,618,751,591,787,532,814,474,831,425"/>
<area shape="rect" href="structdesignlab_1_1_euler_x_y_zdocs#a38d45f9caa4a81b2fb2277653a9b0abf" title="オイラー角を文字列に変換する． 単位は 度 [deg]．" alt="" coords="534,723,671,765"/>
<area shape="poly" title=" " alt="" coords="840,427,827,488,802,565,785,605,763,644,738,680,708,713,691,725,673,733,671,729,689,720,705,709,734,677,759,641,780,603,797,563,822,487,835,425"/>
<area shape="rect" href="structdesignlab_1_1_robot_state_nodedocs#a7fa3f31f167ac1cf468d81509f55c407" title="ノードの情報を文字列に変換する関数． &#160;&#160;デバッグ用に詳細な情報を出力する．" alt="" coords="272,589,451,632"/>
<area shape="poly" title=" " alt="" coords="513,613,452,613,452,608,513,608"/>
<area shape="rect" href="classdesignlab_1_1_system_main_graph_viewerdocs#a19d272521cd15d5e493e24ef5834c218" title="主要な処理を行う関数．" alt="" coords="18,556,211,599"/>
<area shape="poly" title=" " alt="" coords="256,599,211,593,212,588,257,594"/>
<area shape="rect" href="classdesignlab_1_1_system_main_simulationdocs#ab3579cf4bfec29b735c2c2c70b19e738" title="いままで int mainで行われた処理をまとめたもの． &#160;&#160;目標地点へ着くか，歩容計画に失敗した場合に，シミュレーションを終える． &#160;&#160;また，規定の回数シミュレーションしたら終了する．" alt="" coords="5,623,224,665"/>
<area shape="poly" title=" " alt="" coords="257,627,225,632,224,627,256,622"/>
<area shape="poly" title=" " alt="" coords="522,470,431,459,431,454,523,465"/>
<area shape="poly" title=" " alt="" coords="522,658,441,635,442,630,523,653"/>
<area shape="rect" href="classdesignlab_1_1_robot_operator_for_gpgdocs#a240d9588144861d5556613811dc5433e" title="ロボットの動作を更新する．" alt="" coords="277,656,446,699"/>
<area shape="poly" title=" " alt="" coords="522,680,446,680,446,675,522,675"/>
</map>
</div>

</div>
</div>
<a id="a4374f6439315f4043228252eecb07dfe" name="a4374f6439315f4043228252eecb07dfe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4374f6439315f4043228252eecb07dfe">&#9670;&#160;</a></span>GenerateRandomNumber()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;Arithmetic T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T designlab::math_util::GenerateRandomNumber </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>指定した範囲内の乱数を生成する． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">min</td><td>乱数の最小値． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max</td><td>乱数の最大値． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>生成した乱数． </dd></dl>
<dl class="tparams"><dt>テンプレート引数</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>算術型．int, float, doubleなど． </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a92c055e0799991e88871e2a5d4f09280" name="a92c055e0799991e88871e2a5d4f09280"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92c055e0799991e88871e2a5d4f09280">&#9670;&#160;</a></span>IsEqual()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;::std::floating_point T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool designlab::math_util::IsEqual </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>num1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>num2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>C++において，小数同士の計算は誤差が出てしまう． 誤差込みで値が等しいか調べる． </p>
<dl class="tparams"><dt>テンプレート引数</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>float か double のみを想定している． その他の型を使用する場合エラーが出る． </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num1</td><td>比較する数字1つ目． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num2</td><td>比較する数字2つ目． </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>戻り値</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>等しい．または，誤差の範囲で等しい． </td></tr>
    <tr><td class="paramname">false</td><td>等しくない．誤差の範囲外． </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="namespacedesignlab_1_1math__util_a92c055e0799991e88871e2a5d4f09280_icgraph.png" border="0" usemap="#anamespacedesignlab_1_1math__util_a92c055e0799991e88871e2a5d4f09280_icgraph" alt=""/></div>
<map name="anamespacedesignlab_1_1math__util_a92c055e0799991e88871e2a5d4f09280_icgraph" id="anamespacedesignlab_1_1math__util_a92c055e0799991e88871e2a5d4f09280_icgraph">
<area shape="rect" title="C++において，小数同士の計算は誤差が出てしまう． 誤差込みで値が等しいか調べる．" alt="" coords="699,539,837,581"/>
<area shape="rect" href="structdesignlab_1_1_vector2docs#a5b486befcef8a9c50ff78137783c3ba9" title="このベクトルを正規化したベクトルを返す．" alt="" coords="498,105,627,148"/>
<area shape="poly" title=" " alt="" coords="750,526,706,421,649,294,574,150,578,147,654,292,711,419,755,523"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#a685643adba69e22d8f449434f1fce78b" title="単位ベクトルを返す． normalizeとは，ベクトルを正規化（単位ベクトルに変換）する操作を表す． &#160;&#160;絶対値が0のベクトルの場合，そのまま0ベクトルを返す．" alt="" coords="498,305,627,348"/>
<area shape="poly" title=" " alt="" coords="745,527,704,463,649,395,596,351,599,346,653,391,708,460,749,524"/>
<area shape="rect" href="structdesignlab_1_1_line_segment2docs#a8608ddbcf8e71c74186de4fc6420f4ee" title="引数の線分と自身が平行かどうか調べる関数． 全て constexpr 関数で処理できるため非常に高速．" alt="" coords="479,405,646,448"/>
<area shape="poly" title=" " alt="" coords="734,530,695,495,650,462,628,451,630,446,653,458,699,491,738,526"/>
<area shape="rect" href="structdesignlab_1_1_vector2docs#a38510ae37bb30094489c2a09a06f204a" title="このベクトルが0ならば true．" alt="" coords="498,472,627,515"/>
<area shape="poly" title=" " alt="" coords="685,536,627,517,629,512,687,531"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#a6319bbea38d7b4dab6091fe28b99fc57" title="x,y,zともに絶対値が0ならば true を返す．" alt="" coords="498,539,627,581"/>
<area shape="poly" title=" " alt="" coords="684,563,628,563,628,557,684,557"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#a1417e82d921393744bd0496590f078ff" title="2つのベクトルが等しいかどうかを返す．誤差を許容する．" alt="" coords="498,605,627,648"/>
<area shape="poly" title=" " alt="" coords="687,589,629,608,627,603,685,584"/>
<area shape="rect" href="namespacedesignlabdocs#a60f10cf89b782d822987acc6e655a2a7" title="3次元の位置ベクトルを回転させる．必ず正規化クォータニオンを用いること．" alt="" coords="479,672,646,699"/>
<area shape="poly" title=" " alt="" coords="738,595,700,630,653,662,626,674,624,669,650,658,696,626,735,591"/>
<area shape="rect" href="namespacedesignlabdocs#aa6386f09017c25f59fbdf0fa7088ec90" title="球面線形補間を行う．" alt="" coords="474,723,651,749"/>
<area shape="poly" title=" " alt="" coords="751,596,711,656,684,687,653,713,631,724,628,720,650,708,680,683,707,653,747,593"/>
<area shape="rect" href="namespacedesignlabdocs#a54d940e1e1adcbeeec8594a7f542fdef" title="オイラー角からクォータニオンへの変換．" alt="" coords="482,773,643,800"/>
<area shape="poly" title=" " alt="" coords="758,597,743,636,720,681,691,725,653,763,633,775,631,770,650,759,686,722,716,678,738,634,753,595"/>
<area shape="rect" href="classdesignlab_1_1_phantom_x_mk_i_idocs#a688e8dd6b7f92d5b1a4fa8d4fbcc2714" title="安定余裕(Stability Margin)を計算する． 詳しくは「不整地における歩行機械の静的安定性評価基準」 という論文を読んで欲しい． &#160;&#160;接地脚を繋いで作られる多角形の辺と重心の距離の最小値を計..." alt="" coords="239,5,408,48"/>
<area shape="poly" title=" " alt="" coords="506,100,425,62,395,51,396,46,427,58,508,95"/>
<area shape="rect" href="classdesignlab_1_1_com_selectordocs#afe154bc35f0971d6c2c2a649299b23c3" title="重心を求める．" alt="" coords="244,72,403,115"/>
<area shape="poly" title=" " alt="" coords="482,118,403,107,404,102,483,113"/>
<area shape="rect" href="structdesignlab_1_1_vector2docs#ac75623bf80d61ccba4a26c6810eddd3c" title="このベクトルを正規化する． &#160;&#160;絶対値が0のベクトルの場合，そのまま0ベクトルになる．" alt="" coords="259,139,388,181"/>
<area shape="poly" title=" " alt="" coords="483,140,389,154,388,148,482,135"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#ac5187e0ab8d45cda4a36dd38f34884e8" title="このベクトルを正規化する． &#160;&#160;絶対値が0のベクトルの場合，そのまま0ベクトルになる．" alt="" coords="259,205,388,248"/>
<area shape="poly" title=" " alt="" coords="506,300,425,262,387,249,389,244,427,258,508,295"/>
<area shape="rect" href="classdesignlab_1_1_graph_searcher_straight_movedocs#a64643a2293909dc6b0166a916c5b26ee" title="グラフを受け取り，その中から最適な次の動作を出力する．" alt="" coords="221,272,426,315"/>
<area shape="poly" title=" " alt="" coords="483,318,426,310,427,305,483,313"/>
<area shape="rect" href="classdesignlab_1_1_robot_operator_for_gpgdocs#a240d9588144861d5556613811dc5433e" title="ロボットの動作を更新する．" alt="" coords="239,339,408,381"/>
<area shape="poly" title=" " alt="" coords="483,340,408,351,408,346,483,335"/>
<area shape="rect" href="structdesignlab_1_1_line_segment2docs#a334682a88e452a95429edf15593d1846" title="他の線分と交点が存在しているかどうか調べ，交点を返す関数．" alt="" coords="235,405,412,448"/>
<area shape="poly" title=" " alt="" coords="463,429,413,429,413,424,463,424"/>
<area shape="rect" href="structdesignlab_1_1_line_segment2docs#a29ea137970fa696c5789085591e8c2f9" title="他の線分との交点を求める．" alt="" coords="240,472,407,515"/>
<area shape="poly" title=" " alt="" coords="470,455,403,474,402,469,469,450"/>
<area shape="rect" href="structdesignlab_1_1_line_segment2docs#a8e2bdbc5c825c119d1801aa07bf3555e" title="他の線分と交点が存在しているかどうか調べる関数．" alt="" coords="240,539,407,581"/>
<area shape="poly" title=" " alt="" coords="481,458,476,462,461,478,453,495,444,512,428,529,408,540,405,536,424,525,440,509,448,492,456,475,472,458,478,454"/>
<area shape="rect" href="classdesignlab_1_1_phantom_x_mk_i_idocs#aeed1296b4886eb07bc095ca2b5e8c333" title="脚が他の脚と干渉しているかどうかを判定する．" alt="" coords="5,539,173,581"/>
<area shape="poly" title=" " alt="" coords="224,563,173,563,173,557,224,557"/>
<area shape="rect" href="classdesignlab_1_1_dxlib_cameradocs#a849d4bd740e6cebcbe726c7a537d74be" title="カメラの位置などの更新を行う．毎フレーム実行すること．" alt="" coords="244,715,403,757"/>
<area shape="poly" title=" " alt="" coords="459,739,403,739,403,733,459,733"/>
</map>
</div>

</div>
</div>
<a id="a0fa78cd94f2775be2e2416f25675f5f8" name="a0fa78cd94f2775be2e2416f25675f5f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0fa78cd94f2775be2e2416f25675f5f8">&#9670;&#160;</a></span>LimitRangeAngleDeg()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;::std::floating_point T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T designlab::math_util::LimitRangeAngleDeg </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>angle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>角度を -180° ～ 180° の範囲に収める関数． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">angle</td><td>角度 [deg]． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>角度 [-180°, 180°)． </dd></dl>

</div>
</div>
<a id="ac1263c8ff431181d677fad31e8c96db5" name="ac1263c8ff431181d677fad31e8c96db5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1263c8ff431181d677fad31e8c96db5">&#9670;&#160;</a></span>Squared()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;Arithmetic T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr T designlab::math_util::Squared </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>num</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>2乗した値を返す関数． </p>
<dl class="tparams"><dt>テンプレート引数</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>float か double のみを想定している． その他の型を使用する場合エラーが出る． </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num</td><td>2乗する数． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>T 2乗した値． </dd></dl>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="namespacedesignlab_1_1math__util_ac1263c8ff431181d677fad31e8c96db5_icgraph.png" border="0" usemap="#anamespacedesignlab_1_1math__util_ac1263c8ff431181d677fad31e8c96db5_icgraph" alt=""/></div>
<map name="anamespacedesignlab_1_1math__util_ac1263c8ff431181d677fad31e8c96db5_icgraph" id="anamespacedesignlab_1_1math__util_ac1263c8ff431181d677fad31e8c96db5_icgraph">
<area shape="rect" title="2乗した値を返す関数．" alt="" coords="521,39,658,81"/>
<area shape="rect" href="classdesignlab_1_1_camera_draggerdocs#ad9f9da3070ea76a8ae205590e5599d10" title="ドラッグ中の処理を行う． &#160;&#160;カーソルは上にあるけど，ドラッグ中ではない場合でも呼び出される．" alt="" coords="295,5,470,48"/>
<area shape="poly" title=" " alt="" coords="505,49,470,43,471,38,506,44"/>
<area shape="rect" href="classdesignlab_1_1_divided_map_statedocs#a50647e278f9ee754cbfe5196153e2ba8" title="マップのデータを初期化する． ロボットの重心座標を中心にマップのデータを格子状に分割し， その中に存在する脚設置可能点を集める．" alt="" coords="292,72,473,115"/>
<area shape="poly" title=" " alt="" coords="506,76,474,81,473,76,505,71"/>
<area shape="rect" href="classdesignlab_1_1_gait_pattern_generator_basicdocs#a3b957e224a453c5fc85bd15684560043" title="グラフ探索を行い，次の動作として最適なノードを返す．" alt="" coords="8,5,241,48"/>
<area shape="poly" title=" " alt="" coords="282,70,209,51,210,46,283,65"/>
<area shape="rect" href="classdesignlab_1_1_gait_pattern_generator_threaddocs#af6729bdafbd310f762733e7fa10f8df5" title="グラフ探索を行い，次の動作として最適なノードを返す．" alt="" coords="5,72,244,115"/>
<area shape="poly" title=" " alt="" coords="276,96,244,96,244,91,276,91"/>
<area shape="rect" href="classdesignlab_1_1_node_initializerdocs#a717aea9fc00fcb51c5ba3518fac717fc" title="地形に適した初期姿勢を設定する．" alt="" coords="42,139,207,181"/>
<area shape="poly" title=" " alt="" coords="283,122,208,141,207,136,282,117"/>
</map>
</div>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacedesignlabdocs">designlab</a></li><li class="navelem"><a class="el" href="namespacedesignlab_1_1math__utildocs">math_util</a></li>
    <li class="footer">構築: <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>GaitGeneration by Graph Search: designlab::Vector3 構造体</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">GaitGeneration by Graph Search
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- 構築: Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'docs');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','検索');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('structdesignlab_1_1_vector3docs',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">読み取り中…</div>
<div class="SRStatus" id="Searching">検索中…</div>
<div class="SRStatus" id="NoMatches">一致する文字列を見つけられません</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">公開メンバ関数</a> &#124;
<a href="#pub-static-methods">静的公開メンバ関数</a> &#124;
<a href="#pub-attribs">公開変数類</a> &#124;
<a href="structdesignlab_1_1_vector3-membersdocs">全メンバ一覧</a>  </div>
  <div class="headertitle"><div class="title">designlab::Vector3 構造体<span class="mlabels"><span class="mlabel">final</span></span></div></div>
</div><!--header-->
<div class="contents">

<p>3次元の位置ベクトルを表す構造体．  
 <a href="structdesignlab_1_1_vector3docs#details">[詳解]</a></p>

<p><code>#include &lt;<a class="el" href="math__vector3_8h_sourcedocs">math_vector3.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
公開メンバ関数</h2></td></tr>
<tr class="memitem:a749e72a67a54aa80201a8b0cf589b30b" id="r_a749e72a67a54aa80201a8b0cf589b30b"><td class="memItemLeft" align="right" valign="top"><a id="a749e72a67a54aa80201a8b0cf589b30b" name="a749e72a67a54aa80201a8b0cf589b30b"></a>
constexpr&#160;</td><td class="memItemRight" valign="bottom"><b>Vector3</b> ()</td></tr>
<tr class="memdesc:a749e72a67a54aa80201a8b0cf589b30b"><td class="mdescLeft">&#160;</td><td class="mdescRight">&lt; デフォルトコンストラクタ．(0,0,0)で初期化される． <br /></td></tr>
<tr class="separator:a749e72a67a54aa80201a8b0cf589b30b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5aa89e303298e9c1bdc781b42272f09e" id="r_a5aa89e303298e9c1bdc781b42272f09e"><td class="memItemLeft" align="right" valign="top"><a id="a5aa89e303298e9c1bdc781b42272f09e" name="a5aa89e303298e9c1bdc781b42272f09e"></a>
constexpr&#160;</td><td class="memItemRight" valign="bottom"><b>Vector3</b> (const float x_pos, const float y_pos, const float z_pos)</td></tr>
<tr class="separator:a5aa89e303298e9c1bdc781b42272f09e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96238f81cb243be778b64afe8fbb03d8" id="r_a96238f81cb243be778b64afe8fbb03d8"><td class="memItemLeft" align="right" valign="top"><a id="a96238f81cb243be778b64afe8fbb03d8" name="a96238f81cb243be778b64afe8fbb03d8"></a>
constexpr&#160;</td><td class="memItemRight" valign="bottom"><b>Vector3</b> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;other)=default</td></tr>
<tr class="memdesc:a96238f81cb243be778b64afe8fbb03d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">コピーコンストラクタ． <br /></td></tr>
<tr class="separator:a96238f81cb243be778b64afe8fbb03d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6267e500198624fd2888aacc80e3413" id="r_ad6267e500198624fd2888aacc80e3413"><td class="memItemLeft" align="right" valign="top"><a id="ad6267e500198624fd2888aacc80e3413" name="ad6267e500198624fd2888aacc80e3413"></a>
constexpr&#160;</td><td class="memItemRight" valign="bottom"><b>Vector3</b> (<a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&amp;other) noexcept=default</td></tr>
<tr class="memdesc:ad6267e500198624fd2888aacc80e3413"><td class="mdescLeft">&#160;</td><td class="mdescRight">ムーブコンストラクタ． <br /></td></tr>
<tr class="separator:ad6267e500198624fd2888aacc80e3413"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bafdc2ce5cbc6e15fd4479289c0060f" id="r_a9bafdc2ce5cbc6e15fd4479289c0060f"><td class="memItemLeft" align="right" valign="top"><a id="a9bafdc2ce5cbc6e15fd4479289c0060f" name="a9bafdc2ce5cbc6e15fd4479289c0060f"></a>
constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;other)=default</td></tr>
<tr class="memdesc:a9bafdc2ce5cbc6e15fd4479289c0060f"><td class="mdescLeft">&#160;</td><td class="mdescRight">代入演算子． <br /></td></tr>
<tr class="separator:a9bafdc2ce5cbc6e15fd4479289c0060f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1417e82d921393744bd0496590f078ff" id="r_a1417e82d921393744bd0496590f078ff"><td class="memItemLeft" align="right" valign="top"><a id="a1417e82d921393744bd0496590f078ff" name="a1417e82d921393744bd0496590f078ff"></a>
constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;v) const noexcept</td></tr>
<tr class="memdesc:a1417e82d921393744bd0496590f078ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">2つのベクトルが等しいかどうかを返す．誤差を許容する． <br /></td></tr>
<tr class="separator:a1417e82d921393744bd0496590f078ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65352df162e6866dd44a111c9fd2a86e" id="r_a65352df162e6866dd44a111c9fd2a86e"><td class="memItemLeft" align="right" valign="top"><a id="a65352df162e6866dd44a111c9fd2a86e" name="a65352df162e6866dd44a111c9fd2a86e"></a>
constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator!=</b> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;other) const noexcept</td></tr>
<tr class="separator:a65352df162e6866dd44a111c9fd2a86e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b7206f7b25ca47320ba34ba168eade8" id="r_a3b7206f7b25ca47320ba34ba168eade8"><td class="memItemLeft" align="right" valign="top"><a id="a3b7206f7b25ca47320ba34ba168eade8" name="a3b7206f7b25ca47320ba34ba168eade8"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;</b> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;other) const noexcept</td></tr>
<tr class="separator:a3b7206f7b25ca47320ba34ba168eade8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7026338c58b08138d26841bd82dccf5" id="r_af7026338c58b08138d26841bd82dccf5"><td class="memItemLeft" align="right" valign="top"><a id="af7026338c58b08138d26841bd82dccf5" name="af7026338c58b08138d26841bd82dccf5"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&gt;</b> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;other) const noexcept</td></tr>
<tr class="separator:af7026338c58b08138d26841bd82dccf5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc0ce296e0f878e2ba77cb59171db0fa" id="r_acc0ce296e0f878e2ba77cb59171db0fa"><td class="memItemLeft" align="right" valign="top"><a id="acc0ce296e0f878e2ba77cb59171db0fa" name="acc0ce296e0f878e2ba77cb59171db0fa"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;=</b> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;other) const noexcept</td></tr>
<tr class="separator:acc0ce296e0f878e2ba77cb59171db0fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78d23b20666193ca70e7cab30ebcd529" id="r_a78d23b20666193ca70e7cab30ebcd529"><td class="memItemLeft" align="right" valign="top"><a id="a78d23b20666193ca70e7cab30ebcd529" name="a78d23b20666193ca70e7cab30ebcd529"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&gt;=</b> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;other) const noexcept</td></tr>
<tr class="separator:a78d23b20666193ca70e7cab30ebcd529"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a037aad1957892f94ed6f53d6dfe47d3f" id="r_a037aad1957892f94ed6f53d6dfe47d3f"><td class="memItemLeft" align="right" valign="top"><a id="a037aad1957892f94ed6f53d6dfe47d3f" name="a037aad1957892f94ed6f53d6dfe47d3f"></a>
constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><b>operator+</b> () const noexcept</td></tr>
<tr class="separator:a037aad1957892f94ed6f53d6dfe47d3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f523fe2412e338a80f991a58b3b11f5" id="r_a6f523fe2412e338a80f991a58b3b11f5"><td class="memItemLeft" align="right" valign="top"><a id="a6f523fe2412e338a80f991a58b3b11f5" name="a6f523fe2412e338a80f991a58b3b11f5"></a>
constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><b>operator-</b> () const noexcept</td></tr>
<tr class="separator:a6f523fe2412e338a80f991a58b3b11f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34de49815ded31d9e214fcae1792a49f" id="r_a34de49815ded31d9e214fcae1792a49f"><td class="memItemLeft" align="right" valign="top"><a id="a34de49815ded31d9e214fcae1792a49f" name="a34de49815ded31d9e214fcae1792a49f"></a>
constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><b>operator+</b> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;other) const noexcept</td></tr>
<tr class="separator:a34de49815ded31d9e214fcae1792a49f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9f4640d0ffa907b0b664c6b08fa4e5b" id="r_ad9f4640d0ffa907b0b664c6b08fa4e5b"><td class="memItemLeft" align="right" valign="top"><a id="ad9f4640d0ffa907b0b664c6b08fa4e5b" name="ad9f4640d0ffa907b0b664c6b08fa4e5b"></a>
constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><b>operator-</b> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;other) const noexcept</td></tr>
<tr class="separator:ad9f4640d0ffa907b0b664c6b08fa4e5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6efaccc1d320d4acde4aa0ccd920bf3a" id="r_a6efaccc1d320d4acde4aa0ccd920bf3a"><td class="memItemLeft" align="right" valign="top"><a id="a6efaccc1d320d4acde4aa0ccd920bf3a" name="a6efaccc1d320d4acde4aa0ccd920bf3a"></a>
constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><b>operator*</b> (const float num) const noexcept</td></tr>
<tr class="separator:a6efaccc1d320d4acde4aa0ccd920bf3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a711b8d66986b31d06ab0b19c48308c89" id="r_a711b8d66986b31d06ab0b19c48308c89"><td class="memItemLeft" align="right" valign="top"><a id="a711b8d66986b31d06ab0b19c48308c89" name="a711b8d66986b31d06ab0b19c48308c89"></a>
constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><b>operator/</b> (const float num) const</td></tr>
<tr class="separator:a711b8d66986b31d06ab0b19c48308c89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2d8b388365f180d9fc26c6c5042ec11" id="r_ad2d8b388365f180d9fc26c6c5042ec11"><td class="memItemLeft" align="right" valign="top"><a id="ad2d8b388365f180d9fc26c6c5042ec11" name="ad2d8b388365f180d9fc26c6c5042ec11"></a>
<a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator+=</b> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;other) noexcept</td></tr>
<tr class="separator:ad2d8b388365f180d9fc26c6c5042ec11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41173828555e858d10142714625ddf24" id="r_a41173828555e858d10142714625ddf24"><td class="memItemLeft" align="right" valign="top"><a id="a41173828555e858d10142714625ddf24" name="a41173828555e858d10142714625ddf24"></a>
<a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator-=</b> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;other) noexcept</td></tr>
<tr class="separator:a41173828555e858d10142714625ddf24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09e4a9fd63d623c1c6de809c5fe58ff0" id="r_a09e4a9fd63d623c1c6de809c5fe58ff0"><td class="memItemLeft" align="right" valign="top"><a id="a09e4a9fd63d623c1c6de809c5fe58ff0" name="a09e4a9fd63d623c1c6de809c5fe58ff0"></a>
<a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator*=</b> (const float num) noexcept</td></tr>
<tr class="separator:a09e4a9fd63d623c1c6de809c5fe58ff0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9574eae3f088f404427009e89586df8" id="r_ad9574eae3f088f404427009e89586df8"><td class="memItemLeft" align="right" valign="top"><a id="ad9574eae3f088f404427009e89586df8" name="ad9574eae3f088f404427009e89586df8"></a>
<a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator/=</b> (const float num)</td></tr>
<tr class="separator:ad9574eae3f088f404427009e89586df8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b3da21ea415ea86d6d409f2ad053897" id="r_a3b3da21ea415ea86d6d409f2ad053897"><td class="memItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_vector3docs#a3b3da21ea415ea86d6d409f2ad053897">GetSquaredLength</a> () const noexcept</td></tr>
<tr class="memdesc:a3b3da21ea415ea86d6d409f2ad053897"><td class="mdescLeft">&#160;</td><td class="mdescRight">ベクトルの長さの2乗を返す．  <br /></td></tr>
<tr class="separator:a3b3da21ea415ea86d6d409f2ad053897"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa36dbc9d5ec20bf4e1161e0f2593776c" id="r_aa36dbc9d5ec20bf4e1161e0f2593776c"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_vector3docs#aa36dbc9d5ec20bf4e1161e0f2593776c">GetLength</a> () const noexcept</td></tr>
<tr class="memdesc:aa36dbc9d5ec20bf4e1161e0f2593776c"><td class="mdescLeft">&#160;</td><td class="mdescRight">ベクトルの長さを返す．  <br /></td></tr>
<tr class="separator:aa36dbc9d5ec20bf4e1161e0f2593776c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0a76dfe9dc375fd09561734cf782f63" id="r_aa0a76dfe9dc375fd09561734cf782f63"><td class="memItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_vector3docs#aa0a76dfe9dc375fd09561734cf782f63">Dot</a> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;other) const noexcept</td></tr>
<tr class="memdesc:aa0a76dfe9dc375fd09561734cf782f63"><td class="mdescLeft">&#160;</td><td class="mdescRight">自分・引数 の内積の結果を返す．  <br /></td></tr>
<tr class="separator:aa0a76dfe9dc375fd09561734cf782f63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29671be58ff1cc4f073470214a5ae283" id="r_a29671be58ff1cc4f073470214a5ae283"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_vector3docs#a29671be58ff1cc4f073470214a5ae283">Cross</a> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;other) const noexcept</td></tr>
<tr class="memdesc:a29671be58ff1cc4f073470214a5ae283"><td class="mdescLeft">&#160;</td><td class="mdescRight">自分×引数 の外積の結果を返す．  <br /></td></tr>
<tr class="separator:a29671be58ff1cc4f073470214a5ae283"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa13dfcc4ab31c0987b1e25845a2243e" id="r_aaa13dfcc4ab31c0987b1e25845a2243e"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_vector3docs#aaa13dfcc4ab31c0987b1e25845a2243e">GetDistanceFrom</a> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;other) const noexcept</td></tr>
<tr class="memdesc:aaa13dfcc4ab31c0987b1e25845a2243e"><td class="mdescLeft">&#160;</td><td class="mdescRight">別のベクトルと，このベクトルの距離を返す．  <br /></td></tr>
<tr class="separator:aaa13dfcc4ab31c0987b1e25845a2243e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a685643adba69e22d8f449434f1fce78b" id="r_a685643adba69e22d8f449434f1fce78b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_vector3docs#a685643adba69e22d8f449434f1fce78b">GetNormalized</a> () const noexcept</td></tr>
<tr class="memdesc:a685643adba69e22d8f449434f1fce78b"><td class="mdescLeft">&#160;</td><td class="mdescRight">単位ベクトルを返す． normalizeとは，ベクトルを正規化（単位ベクトルに変換）する操作を表す． <br  />
 絶対値が0のベクトルの場合，そのまま0ベクトルを返す．  <br /></td></tr>
<tr class="separator:a685643adba69e22d8f449434f1fce78b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6319bbea38d7b4dab6091fe28b99fc57" id="r_a6319bbea38d7b4dab6091fe28b99fc57"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_vector3docs#a6319bbea38d7b4dab6091fe28b99fc57">IsZero</a> () const noexcept</td></tr>
<tr class="memdesc:a6319bbea38d7b4dab6091fe28b99fc57"><td class="mdescLeft">&#160;</td><td class="mdescRight">x,y,zともに絶対値が0ならば true を返す．  <br /></td></tr>
<tr class="separator:a6319bbea38d7b4dab6091fe28b99fc57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5187e0ab8d45cda4a36dd38f34884e8" id="r_ac5187e0ab8d45cda4a36dd38f34884e8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_vector3docs#ac5187e0ab8d45cda4a36dd38f34884e8">Normalize</a> () noexcept</td></tr>
<tr class="memdesc:ac5187e0ab8d45cda4a36dd38f34884e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">このベクトルを正規化する． <br  />
 絶対値が0のベクトルの場合，そのまま0ベクトルになる．  <br /></td></tr>
<tr class="separator:ac5187e0ab8d45cda4a36dd38f34884e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf3651416f231824ffd780b72f5bba27" id="r_aaf3651416f231824ffd780b72f5bba27"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="structdesignlab_1_1_vector2docs">Vector2</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_vector3docs#aaf3651416f231824ffd780b72f5bba27">ProjectedXY</a> () const noexcept</td></tr>
<tr class="memdesc:aaf3651416f231824ffd780b72f5bba27"><td class="mdescLeft">&#160;</td><td class="mdescRight">XY平面に射影したベクトルを返す．  <br /></td></tr>
<tr class="separator:aaf3651416f231824ffd780b72f5bba27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adced04a30051a7d7a5845a1d9a9d1c11" id="r_adced04a30051a7d7a5845a1d9a9d1c11"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_vector3docs#adced04a30051a7d7a5845a1d9a9d1c11">ToString</a> () const</td></tr>
<tr class="memdesc:adced04a30051a7d7a5845a1d9a9d1c11"><td class="mdescLeft">&#160;</td><td class="mdescRight">このベクトルを文字列にして返す． <br  />
 (x, y, z) の形式，小数点以下3桁まで．  <br /></td></tr>
<tr class="separator:adced04a30051a7d7a5845a1d9a9d1c11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a834e5d8c3c9f2701570fa22ffd4b4a00" id="r_a834e5d8c3c9f2701570fa22ffd4b4a00"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_vector3docs#a834e5d8c3c9f2701570fa22ffd4b4a00">ToCsvString</a> () const</td></tr>
<tr class="memdesc:a834e5d8c3c9f2701570fa22ffd4b4a00"><td class="mdescLeft">&#160;</td><td class="mdescRight">このベクトルをCSV形式の文字列にして返す． <br  />
 x, y, z の形式，小数点以下3桁まで．  <br /></td></tr>
<tr class="separator:a834e5d8c3c9f2701570fa22ffd4b4a00"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
静的公開メンバ関数</h2></td></tr>
<tr class="memitem:a891935bd4a3e01124107225f8d03f33c" id="r_a891935bd4a3e01124107225f8d03f33c"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_vector3docs#a891935bd4a3e01124107225f8d03f33c">GetFrontVec</a> () noexcept</td></tr>
<tr class="memdesc:a891935bd4a3e01124107225f8d03f33c"><td class="mdescLeft">&#160;</td><td class="mdescRight">正面に進む単位ベクトルを返す． 静的な関数なので，Vector3::GetFrontVec() と呼び出せる．  <br /></td></tr>
<tr class="separator:a891935bd4a3e01124107225f8d03f33c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac69e2400ddfbcb063008f8f92b3bd0b0" id="r_ac69e2400ddfbcb063008f8f92b3bd0b0"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_vector3docs#ac69e2400ddfbcb063008f8f92b3bd0b0">GetLeftVec</a> () noexcept</td></tr>
<tr class="memdesc:ac69e2400ddfbcb063008f8f92b3bd0b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">左に進む単位ベクトルを返す． 静的な関数なので，Vector3::GetLeftVec() と呼び出せる．  <br /></td></tr>
<tr class="separator:ac69e2400ddfbcb063008f8f92b3bd0b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49ed064fabc10cd349d8f02e7f8d5bfd" id="r_a49ed064fabc10cd349d8f02e7f8d5bfd"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_vector3docs#a49ed064fabc10cd349d8f02e7f8d5bfd">GetUpVec</a> () noexcept</td></tr>
<tr class="memdesc:a49ed064fabc10cd349d8f02e7f8d5bfd"><td class="mdescLeft">&#160;</td><td class="mdescRight">上に進む単位ベクトルを返す． 静的な関数なので，Vector3::GetUpVec() と呼び出せる．  <br /></td></tr>
<tr class="separator:a49ed064fabc10cd349d8f02e7f8d5bfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb4d141dbd87c98d1006151956566f13" id="r_adb4d141dbd87c98d1006151956566f13"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_vector3docs#adb4d141dbd87c98d1006151956566f13">GetZeroVec</a> () noexcept</td></tr>
<tr class="memdesc:adb4d141dbd87c98d1006151956566f13"><td class="mdescLeft">&#160;</td><td class="mdescRight">零ベクトルを返す． 静的な関数なので，Vector3::GetZeroVec() と呼び出せる．  <br /></td></tr>
<tr class="separator:adb4d141dbd87c98d1006151956566f13"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-attribs" name="pub-attribs"></a>
公開変数類</h2></td></tr>
<tr class="memitem:a1173ed2dd31322b92dd4dae067177cbc" id="r_a1173ed2dd31322b92dd4dae067177cbc"><td class="memItemLeft" align="right" valign="top"><a id="a1173ed2dd31322b92dd4dae067177cbc" name="a1173ed2dd31322b92dd4dae067177cbc"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>x</b></td></tr>
<tr class="memdesc:a1173ed2dd31322b92dd4dae067177cbc"><td class="mdescLeft">&#160;</td><td class="mdescRight">ロボットの正面方向に正． <br /></td></tr>
<tr class="separator:a1173ed2dd31322b92dd4dae067177cbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2c9878342038c6a35c98e30dd532fae" id="r_af2c9878342038c6a35c98e30dd532fae"><td class="memItemLeft" align="right" valign="top"><a id="af2c9878342038c6a35c98e30dd532fae" name="af2c9878342038c6a35c98e30dd532fae"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>y</b></td></tr>
<tr class="memdesc:af2c9878342038c6a35c98e30dd532fae"><td class="mdescLeft">&#160;</td><td class="mdescRight">ロボットの左向きに正． <br /></td></tr>
<tr class="separator:af2c9878342038c6a35c98e30dd532fae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71c4baaa6cf57587e5cdadc5558cb4fd" id="r_a71c4baaa6cf57587e5cdadc5558cb4fd"><td class="memItemLeft" align="right" valign="top"><a id="a71c4baaa6cf57587e5cdadc5558cb4fd" name="a71c4baaa6cf57587e5cdadc5558cb4fd"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>z</b></td></tr>
<tr class="memdesc:a71c4baaa6cf57587e5cdadc5558cb4fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">ロボットの上向きに正． <br /></td></tr>
<tr class="separator:a71c4baaa6cf57587e5cdadc5558cb4fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">詳解</h2>
<div class="textblock"><p>3次元の位置ベクトルを表す構造体． </p>
<p>座標系はロボットの進行方向にXの正，ロボットの上向きにZの正， 右手座標系にYをとっている． <br  />
<br  />
 ヘッダファイル内に実装を書くのは個人的には避けたいのだが， constexpr関数を使う場合，このようにする必要がある． constexpr関数はコンパイル時に値を計算できることを， コンパイラに伝えるためのものである． (C言語のマクロのような動作ができる) 実行速度が大切なプロジェクトであるため，このように処理を記述する． <br  />
</p>
<h3><a class="anchor" id="参考"></a>
参考</h3>
<ul>
<li>C++、constexprのまとめ <a href="https://qiita.com/KRiver1/items/ef7731467b5ca83850cb">https://qiita.com/KRiver1/items/ef7731467b5ca83850cb</a> ( アクセス日 2024/2/29 ) </li>
<li>AB - 3.04.構造体&gt;細かい話&gt;コンストラクタ <a href="https://atcoder.jp/contests/apg4b/tasks/APG4b_ab?lang=ja">https://atcoder.jp/contests/apg4b/tasks/APG4b_ab?lang=ja</a> ( アクセス日 2024/2/29 ) </li>
<li>非クラス関数による演算子オーバーロード <a href="https://programming.pc-note.net/cpp/operator2.html">https://programming.pc-note.net/cpp/operator2.html</a> ( アクセス日 2024/2/29 ) </li>
<li>衝突判定編 <a href="http://marupeke296.com/COL_main.html">http://marupeke296.com/COL_main.html</a> ( アクセス日 2024/2/29 ) </li>
</ul>
</div><h2 class="groupheader">関数詳解</h2>
<a id="a29671be58ff1cc4f073470214a5ae283" name="a29671be58ff1cc4f073470214a5ae283"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29671be58ff1cc4f073470214a5ae283">&#9670;&#160;</a></span>Cross()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> designlab::Vector3::Cross </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>自分×引数 の外積の結果を返す． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">other</td><td>外積の掛け算：後ろのベクトル． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>外積の結果． このベクトル→引数へ回転する右ねじが進む方向のベクトルが出力される． </dd></dl>

</div>
</div>
<a id="aa0a76dfe9dc375fd09561734cf782f63" name="aa0a76dfe9dc375fd09561734cf782f63"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0a76dfe9dc375fd09561734cf782f63">&#9670;&#160;</a></span>Dot()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr float designlab::Vector3::Dot </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>自分・引数 の内積の結果を返す． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">other</td><td>もう一方のベクトル． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>内積の結果． </dd></dl>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_vector3_aa0a76dfe9dc375fd09561734cf782f63_icgraph.png" border="0" usemap="#astructdesignlab_1_1_vector3_aa0a76dfe9dc375fd09561734cf782f63_icgraph" alt=""/></div>
<map name="astructdesignlab_1_1_vector3_aa0a76dfe9dc375fd09561734cf782f63_icgraph" id="astructdesignlab_1_1_vector3_aa0a76dfe9dc375fd09561734cf782f63_icgraph">
<area shape="rect" title="自分・引数 の内積の結果を返す．" alt="" coords="669,49,827,76"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs#afaac2f3922f46f7286a2e650f791cec4" title="クォータニオンの内積を返す． クォータニオンを4次元のベクトルとみなし，ベクトルの内積を求める．" alt="" coords="446,19,621,45"/>
<area shape="poly" title=" " alt="" coords="654,52,622,47,622,42,654,47"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs#a24ad10137dd081de9002ac270cdce9f9" title="クォータニオンの長さの2乗を返す(ノルムの2乗)． &#160;&#160;クォータニオンの長さの2乗は，w^2 + x^2 + y^2 + z^2 で求められる．" alt="" coords="460,71,607,113"/>
<area shape="poly" title=" " alt="" coords="655,78,608,85,607,79,654,73"/>
<area shape="rect" href="namespacedesignlabdocs#aa6386f09017c25f59fbdf0fa7088ec90" title="球面線形補間を行う．" alt="" coords="221,15,398,41"/>
<area shape="poly" title=" " alt="" coords="430,33,398,32,399,27,430,27"/>
<area shape="rect" href="classdesignlab_1_1_dxlib_cameradocs#a849d4bd740e6cebcbe726c7a537d74be" title="カメラの位置などの更新を行う．毎フレーム実行すること．" alt="" coords="10,5,168,48"/>
<area shape="poly" title=" " alt="" coords="205,30,169,30,169,24,205,25"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs#ab34d9fa35a4954182603f9c706f525fe" title="他のクォータニオンとの距離の2乗を返す． クォータニオンを4次元ベクトルとみなし，ベクトルの距離の2乗を求める．" alt="" coords="235,71,384,113"/>
<area shape="poly" title=" " alt="" coords="445,95,385,95,385,89,445,89"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs#a56bbbd522805450144f54aae7dbd117e" title="クォータニオンのノルムを返す． &#160;&#160;ノルムとは，ベクトルの大きさのこと． クォータニオンのノルムは，w^2 + x^2 + y^2 + z^2 の平方根で求められる．" alt="" coords="236,139,383,181"/>
<area shape="poly" title=" " alt="" coords="447,121,383,141,381,135,446,116"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs#ad164e180a90ff6e7e1df3f5b57cb8b3b" title="クォータニオンの逆数を返す． &#160;&#160;クォータニオンqの逆数q^&#45;1は，qの共役をノルムで割ったもの． &#160;&#160;q^&#45;1 = q* / |q|^2" alt="" coords="15,72,163,115"/>
<area shape="poly" title=" " alt="" coords="222,136,161,118,163,113,223,131"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs#a2c504d31353e189b1fa7a83cfd60deba" title="正規化したクォータニオンを返す． &#160;&#160;クォータニオンの正規化とは，ノルムを1にすることを表す． &#160;&#160;クォータニオンqの正規化は，q / |q| で求められる．" alt="" coords="15,139,163,181"/>
<area shape="poly" title=" " alt="" coords="221,163,163,163,163,157,221,157"/>
<area shape="rect" href="namespacedesignlabdocs#a60f10cf89b782d822987acc6e655a2a7" title="3次元の位置ベクトルを回転させる．必ず正規化クォータニオンを用いること．" alt="" coords="5,205,173,232"/>
<area shape="poly" title=" " alt="" coords="222,186,143,207,142,202,220,181"/>
<area shape="rect" href="namespacedesignlabdocs#a54d940e1e1adcbeeec8594a7f542fdef" title="オイラー角からクォータニオンへの変換．" alt="" coords="8,256,170,283"/>
<area shape="poly" title=" " alt="" coords="267,192,223,220,174,246,144,258,142,253,172,242,220,216,264,188"/>
</map>
</div>

</div>
</div>
<a id="aaa13dfcc4ab31c0987b1e25845a2243e" name="aaa13dfcc4ab31c0987b1e25845a2243e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa13dfcc4ab31c0987b1e25845a2243e">&#9670;&#160;</a></span>GetDistanceFrom()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float designlab::Vector3::GetDistanceFrom </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>別のベクトルと，このベクトルの距離を返す． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">other</td><td>別のベクトル． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>距離． </dd></dl>

</div>
</div>
<a id="a891935bd4a3e01124107225f8d03f33c" name="a891935bd4a3e01124107225f8d03f33c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a891935bd4a3e01124107225f8d03f33c">&#9670;&#160;</a></span>GetFrontVec()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> designlab::Vector3::GetFrontVec </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>正面に進む単位ベクトルを返す． 静的な関数なので，Vector3::GetFrontVec() と呼び出せる． </p>
<div class="fragment"><div class="line"><a class="code hl_struct" href="structdesignlab_1_1_vector3docs">Vector3</a> vec = <a class="code hl_function" href="structdesignlab_1_1_vector3docs#a891935bd4a3e01124107225f8d03f33c">Vector3::GetFrontVec</a>();</div>
<div class="ttc" id="astructdesignlab_1_1_vector3docs"><div class="ttname"><a href="structdesignlab_1_1_vector3docs">designlab::Vector3</a></div><div class="ttdoc">3次元の位置ベクトルを表す構造体．</div><div class="ttdef"><b>Definition</b> math_vector3.h:39</div></div>
<div class="ttc" id="astructdesignlab_1_1_vector3docs_a891935bd4a3e01124107225f8d03f33c"><div class="ttname"><a href="structdesignlab_1_1_vector3docs#a891935bd4a3e01124107225f8d03f33c">designlab::Vector3::GetFrontVec</a></div><div class="ttdeci">static constexpr Vector3 GetFrontVec() noexcept</div><div class="ttdoc">正面に進む単位ベクトルを返す． 静的な関数なので，Vector3::GetFrontVec() と呼び出せる．</div><div class="ttdef"><b>Definition</b> math_vector3.h:210</div></div>
</div><!-- fragment --> <dl class="section return"><dt>戻り値</dt><dd>正面方向の単位ベクトル，xの正方向． </dd></dl>

</div>
</div>
<a id="ac69e2400ddfbcb063008f8f92b3bd0b0" name="ac69e2400ddfbcb063008f8f92b3bd0b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac69e2400ddfbcb063008f8f92b3bd0b0">&#9670;&#160;</a></span>GetLeftVec()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> designlab::Vector3::GetLeftVec </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>左に進む単位ベクトルを返す． 静的な関数なので，Vector3::GetLeftVec() と呼び出せる． </p>
<dl class="section return"><dt>戻り値</dt><dd>左方向の単位ベクトル，yの正方向． </dd></dl>

</div>
</div>
<a id="aa36dbc9d5ec20bf4e1161e0f2593776c" name="aa36dbc9d5ec20bf4e1161e0f2593776c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa36dbc9d5ec20bf4e1161e0f2593776c">&#9670;&#160;</a></span>GetLength()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float designlab::Vector3::GetLength </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>ベクトルの長さを返す． </p>
<dl class="section return"><dt>戻り値</dt><dd>ベクトルの長さ． </dd></dl>
<dl class="section note"><dt>覚え書き</dt><dd>sqrt(ルートの計算)が重いので， GetSquaredLength でいいならそちらを使うべき． </dd></dl>
<div class="dynheader">
呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_vector3_aa36dbc9d5ec20bf4e1161e0f2593776c_cgraph.png" border="0" usemap="#astructdesignlab_1_1_vector3_aa36dbc9d5ec20bf4e1161e0f2593776c_cgraph" alt=""/></div>
<map name="astructdesignlab_1_1_vector3_aa36dbc9d5ec20bf4e1161e0f2593776c_cgraph" id="astructdesignlab_1_1_vector3_aa36dbc9d5ec20bf4e1161e0f2593776c_cgraph">
<area shape="rect" title="ベクトルの長さを返す．" alt="" coords="5,5,135,48"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#a3b3da21ea415ea86d6d409f2ad053897" title="ベクトルの長さの2乗を返す．" alt="" coords="183,5,320,48"/>
<area shape="poly" title=" " alt="" coords="135,24,167,24,167,29,135,29"/>
</map>
</div>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_vector3_aa36dbc9d5ec20bf4e1161e0f2593776c_icgraph.png" border="0" usemap="#astructdesignlab_1_1_vector3_aa36dbc9d5ec20bf4e1161e0f2593776c_icgraph" alt=""/></div>
<map name="astructdesignlab_1_1_vector3_aa36dbc9d5ec20bf4e1161e0f2593776c_icgraph" id="astructdesignlab_1_1_vector3_aa36dbc9d5ec20bf4e1161e0f2593776c_icgraph">
<area shape="rect" title="ベクトルの長さを返す．" alt="" coords="474,75,603,117"/>
<area shape="rect" href="classdesignlab_1_1_phantom_x_mk_i_idocs#ac027dc121a54e00da42ffcbab0028561" title="指定した脚の関節のグローバル座標と，角度を計算する． &#160;&#160;重たいのでグラフ探索や，描画処理中にループで使用することは推奨しない． &#160;&#160;間接の可動範囲外まで動いてしまう場合でも，答えを返す． &#160;&#160;目標座標..." alt="" coords="259,8,426,51"/>
<area shape="poly" title=" " alt="" coords="459,72,406,54,408,49,460,67"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#a685643adba69e22d8f449434f1fce78b" title="単位ベクトルを返す． normalizeとは，ベクトルを正規化（単位ベクトルに変換）する操作を表す． &#160;&#160;絶対値が0のベクトルの場合，そのまま0ベクトルを返す．" alt="" coords="278,75,407,117"/>
<area shape="poly" title=" " alt="" coords="458,99,408,99,408,93,458,93"/>
<area shape="rect" href="classdesignlab_1_1_graph_searcher_straight_movedocs#a64643a2293909dc6b0166a916c5b26ee" title="グラフを受け取り，その中から最適な次の動作を出力する．" alt="" coords="5,139,211,181"/>
<area shape="poly" title=" " alt="" coords="460,124,427,132,316,149,212,158,211,153,315,143,425,127,458,119"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#ac5187e0ab8d45cda4a36dd38f34884e8" title="このベクトルを正規化する． &#160;&#160;絶対値が0のベクトルの場合，そのまま0ベクトルになる．" alt="" coords="43,5,173,48"/>
<area shape="poly" title=" " alt="" coords="262,75,172,48,174,43,263,70"/>
<area shape="poly" title=" " alt="" coords="263,120,189,141,188,135,262,115"/>
<area shape="rect" href="classdesignlab_1_1_robot_operator_for_gpgdocs#a240d9588144861d5556613811dc5433e" title="ロボットの動作を更新する．" alt="" coords="24,72,192,115"/>
<area shape="poly" title=" " alt="" coords="262,98,193,97,193,92,262,92"/>
</map>
</div>

</div>
</div>
<a id="a685643adba69e22d8f449434f1fce78b" name="a685643adba69e22d8f449434f1fce78b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a685643adba69e22d8f449434f1fce78b">&#9670;&#160;</a></span>GetNormalized()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> designlab::Vector3::GetNormalized </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>単位ベクトルを返す． normalizeとは，ベクトルを正規化（単位ベクトルに変換）する操作を表す． <br  />
 絶対値が0のベクトルの場合，そのまま0ベクトルを返す． </p>
<dl class="section return"><dt>戻り値</dt><dd>正規化されたベクトル． </dd></dl>
<div class="dynheader">
呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_vector3_a685643adba69e22d8f449434f1fce78b_cgraph.png" border="0" usemap="#astructdesignlab_1_1_vector3_a685643adba69e22d8f449434f1fce78b_cgraph" alt=""/></div>
<map name="astructdesignlab_1_1_vector3_a685643adba69e22d8f449434f1fce78b_cgraph" id="astructdesignlab_1_1_vector3_a685643adba69e22d8f449434f1fce78b_cgraph">
<area shape="rect" title="単位ベクトルを返す． normalizeとは，ベクトルを正規化（単位ベクトルに変換）する操作を表す． &#160;&#160;絶対値が0のベクトルの場合，そのまま0ベクトルを返す．" alt="" coords="5,39,135,81"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#aa36dbc9d5ec20bf4e1161e0f2593776c" title="ベクトルの長さを返す．" alt="" coords="187,5,316,48"/>
<area shape="poly" title=" " alt="" coords="135,45,171,39,172,44,136,51"/>
<area shape="rect" href="namespacedesignlab_1_1math__utildocs#a92c055e0799991e88871e2a5d4f09280" title="C++において，小数同士の計算は誤差が出てしまう． 誤差込みで値が等しいか調べる．" alt="" coords="183,72,320,115"/>
<area shape="poly" title=" " alt="" coords="136,69,168,75,167,81,135,75"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#a3b3da21ea415ea86d6d409f2ad053897" title="ベクトルの長さの2乗を返す．" alt="" coords="368,5,505,48"/>
<area shape="poly" title=" " alt="" coords="317,24,352,24,352,29,317,29"/>
</map>
</div>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_vector3_a685643adba69e22d8f449434f1fce78b_icgraph.png" border="0" usemap="#astructdesignlab_1_1_vector3_a685643adba69e22d8f449434f1fce78b_icgraph" alt=""/></div>
<map name="astructdesignlab_1_1_vector3_a685643adba69e22d8f449434f1fce78b_icgraph" id="astructdesignlab_1_1_vector3_a685643adba69e22d8f449434f1fce78b_icgraph">
<area shape="rect" title="単位ベクトルを返す． normalizeとは，ベクトルを正規化（単位ベクトルに変換）する操作を表す． &#160;&#160;絶対値が0のベクトルの場合，そのまま0ベクトルを返す．" alt="" coords="259,72,388,115"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#ac5187e0ab8d45cda4a36dd38f34884e8" title="このベクトルを正規化する． &#160;&#160;絶対値が0のベクトルの場合，そのまま0ベクトルになる．" alt="" coords="43,5,173,48"/>
<area shape="poly" title=" " alt="" coords="243,71,172,49,174,44,245,66"/>
<area shape="rect" href="classdesignlab_1_1_graph_searcher_straight_movedocs#a64643a2293909dc6b0166a916c5b26ee" title="グラフを受け取り，その中から最適な次の動作を出力する．" alt="" coords="5,72,211,115"/>
<area shape="poly" title=" " alt="" coords="243,96,211,96,211,91,243,91"/>
<area shape="rect" href="classdesignlab_1_1_robot_operator_for_gpgdocs#a240d9588144861d5556613811dc5433e" title="ロボットの動作を更新する．" alt="" coords="24,139,192,181"/>
<area shape="poly" title=" " alt="" coords="245,120,180,141,179,135,243,115"/>
</map>
</div>

</div>
</div>
<a id="a3b3da21ea415ea86d6d409f2ad053897" name="a3b3da21ea415ea86d6d409f2ad053897"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b3da21ea415ea86d6d409f2ad053897">&#9670;&#160;</a></span>GetSquaredLength()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr float designlab::Vector3::GetSquaredLength </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>ベクトルの長さの2乗を返す． </p>
<dl class="section return"><dt>戻り値</dt><dd>x,y,zの値を2乗にして足し合わせたスカラー値． </dd></dl>
<dl class="section note"><dt>覚え書き</dt><dd>sqrt(ルートの計算)が重いのでこちらを使えるなら使うべき． </dd></dl>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_vector3_a3b3da21ea415ea86d6d409f2ad053897_icgraph.png" border="0" usemap="#astructdesignlab_1_1_vector3_a3b3da21ea415ea86d6d409f2ad053897_icgraph" alt=""/></div>
<map name="astructdesignlab_1_1_vector3_a3b3da21ea415ea86d6d409f2ad053897_icgraph" id="astructdesignlab_1_1_vector3_a3b3da21ea415ea86d6d409f2ad053897_icgraph">
<area shape="rect" title="ベクトルの長さの2乗を返す．" alt="" coords="651,41,789,84"/>
<area shape="rect" href="classdesignlab_1_1_phantom_x_mk_i_idocs#ac027dc121a54e00da42ffcbab0028561" title="指定した脚の関節のグローバル座標と，角度を計算する． &#160;&#160;重たいのでグラフ探索や，描画処理中にループで使用することは推奨しない． &#160;&#160;間接の可動範囲外まで動いてしまう場合でも，答えを返す． &#160;&#160;目標座標..." alt="" coords="259,8,426,51"/>
<area shape="poly" title=" " alt="" coords="636,58,426,39,427,34,636,53"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#aa36dbc9d5ec20bf4e1161e0f2593776c" title="ベクトルの長さを返す．" alt="" coords="474,71,603,113"/>
<area shape="poly" title=" " alt="" coords="637,79,604,84,603,79,636,74"/>
<area shape="poly" title=" " alt="" coords="458,69,411,54,412,49,460,64"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#a685643adba69e22d8f449434f1fce78b" title="単位ベクトルを返す． normalizeとは，ベクトルを正規化（単位ベクトルに変換）する操作を表す． &#160;&#160;絶対値が0のベクトルの場合，そのまま0ベクトルを返す．" alt="" coords="278,75,407,117"/>
<area shape="poly" title=" " alt="" coords="458,96,408,97,407,92,458,91"/>
<area shape="rect" href="classdesignlab_1_1_graph_searcher_straight_movedocs#a64643a2293909dc6b0166a916c5b26ee" title="グラフを受け取り，その中から最適な次の動作を出力する．" alt="" coords="5,139,211,181"/>
<area shape="poly" title=" " alt="" coords="466,121,427,132,316,150,211,159,211,153,315,144,425,127,465,116"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#ac5187e0ab8d45cda4a36dd38f34884e8" title="このベクトルを正規化する． &#160;&#160;絶対値が0のベクトルの場合，そのまま0ベクトルになる．" alt="" coords="43,5,173,48"/>
<area shape="poly" title=" " alt="" coords="262,75,172,48,174,43,263,70"/>
<area shape="poly" title=" " alt="" coords="263,120,189,141,188,135,262,115"/>
<area shape="rect" href="classdesignlab_1_1_robot_operator_for_gpgdocs#a240d9588144861d5556613811dc5433e" title="ロボットの動作を更新する．" alt="" coords="24,72,192,115"/>
<area shape="poly" title=" " alt="" coords="262,98,193,97,193,92,262,92"/>
</map>
</div>

</div>
</div>
<a id="a49ed064fabc10cd349d8f02e7f8d5bfd" name="a49ed064fabc10cd349d8f02e7f8d5bfd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49ed064fabc10cd349d8f02e7f8d5bfd">&#9670;&#160;</a></span>GetUpVec()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> designlab::Vector3::GetUpVec </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>上に進む単位ベクトルを返す． 静的な関数なので，Vector3::GetUpVec() と呼び出せる． </p>
<dl class="section return"><dt>戻り値</dt><dd>上方向の単位ベクトル，zの正方向． </dd></dl>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_vector3_a49ed064fabc10cd349d8f02e7f8d5bfd_icgraph.png" border="0" usemap="#astructdesignlab_1_1_vector3_a49ed064fabc10cd349d8f02e7f8d5bfd_icgraph" alt=""/></div>
<map name="astructdesignlab_1_1_vector3_a49ed064fabc10cd349d8f02e7f8d5bfd_icgraph" id="astructdesignlab_1_1_vector3_a49ed064fabc10cd349d8f02e7f8d5bfd_icgraph">
<area shape="rect" title="上に進む単位ベクトルを返す． 静的な関数なので，Vector3::GetUpVec() と呼び出せる．" alt="" coords="189,5,318,48"/>
<area shape="rect" href="namespacedesignlab_1_1dxlib__utildocs#a817972c248c109584a567e959799b9e6" title="3D処理を行う上で必要な初期化処理をまとめたもの．" alt="" coords="5,5,141,48"/>
<area shape="poly" title=" " alt="" coords="173,29,141,29,141,24,173,24"/>
</map>
</div>

</div>
</div>
<a id="adb4d141dbd87c98d1006151956566f13" name="adb4d141dbd87c98d1006151956566f13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb4d141dbd87c98d1006151956566f13">&#9670;&#160;</a></span>GetZeroVec()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> designlab::Vector3::GetZeroVec </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>零ベクトルを返す． 静的な関数なので，Vector3::GetZeroVec() と呼び出せる． </p>
<dl class="section return"><dt>戻り値</dt><dd>零ベクトル． </dd></dl>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_vector3_adb4d141dbd87c98d1006151956566f13_icgraph.png" border="0" usemap="#astructdesignlab_1_1_vector3_adb4d141dbd87c98d1006151956566f13_icgraph" alt=""/></div>
<map name="astructdesignlab_1_1_vector3_adb4d141dbd87c98d1006151956566f13_icgraph" id="astructdesignlab_1_1_vector3_adb4d141dbd87c98d1006151956566f13_icgraph">
<area shape="rect" title="零ベクトルを返す． 静的な関数なので，Vector3::GetZeroVec() と呼び出せる．" alt="" coords="235,5,364,48"/>
<area shape="rect" href="classdesignlab_1_1_divided_map_statedocs#a4fa0d0b29f758a1f23a6743c749a8013" title="格子状に切り分けられたマップから，脚設置可能点の実際の座標を取得する． &#160;&#160;範囲外の値を指定した場合は，(0,0,0)を返す．" alt="" coords="5,5,187,48"/>
<area shape="poly" title=" " alt="" coords="219,29,187,29,187,24,219,24"/>
</map>
</div>

</div>
</div>
<a id="a6319bbea38d7b4dab6091fe28b99fc57" name="a6319bbea38d7b4dab6091fe28b99fc57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6319bbea38d7b4dab6091fe28b99fc57">&#9670;&#160;</a></span>IsZero()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool designlab::Vector3::IsZero </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>x,y,zともに絶対値が0ならば true を返す． </p>
<dl class="section return"><dt>戻り値</dt><dd>0ならば true そうでなければ false． </dd></dl>
<dl class="section note"><dt>覚え書き</dt><dd>誤差を許容する． </dd></dl>
<div class="dynheader">
呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_vector3_a6319bbea38d7b4dab6091fe28b99fc57_cgraph.png" border="0" usemap="#astructdesignlab_1_1_vector3_a6319bbea38d7b4dab6091fe28b99fc57_cgraph" alt=""/></div>
<map name="astructdesignlab_1_1_vector3_a6319bbea38d7b4dab6091fe28b99fc57_cgraph" id="astructdesignlab_1_1_vector3_a6319bbea38d7b4dab6091fe28b99fc57_cgraph">
<area shape="rect" title="x,y,zともに絶対値が0ならば true を返す．" alt="" coords="5,5,135,48"/>
<area shape="rect" href="namespacedesignlab_1_1math__utildocs#a92c055e0799991e88871e2a5d4f09280" title="C++において，小数同士の計算は誤差が出てしまう． 誤差込みで値が等しいか調べる．" alt="" coords="183,5,320,48"/>
<area shape="poly" title=" " alt="" coords="135,24,167,24,167,29,135,29"/>
</map>
</div>

</div>
</div>
<a id="ac5187e0ab8d45cda4a36dd38f34884e8" name="ac5187e0ab8d45cda4a36dd38f34884e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5187e0ab8d45cda4a36dd38f34884e8">&#9670;&#160;</a></span>Normalize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void designlab::Vector3::Normalize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>このベクトルを正規化する． <br  />
 絶対値が0のベクトルの場合，そのまま0ベクトルになる． </p>
<dl class="section attention"><dt>注意</dt><dd>この関数は，このベクトルの値を変更する． <a class="el" href="structdesignlab_1_1_vector3docs#a685643adba69e22d8f449434f1fce78b" title="単位ベクトルを返す． normalizeとは，ベクトルを正規化（単位ベクトルに変換）する操作を表す．   絶対値が0のベクトルの場合，そのまま0ベクトルを返す．">GetNormalized()</a> は値を変更しない． 間違えないようにすること． </dd></dl>
<div class="dynheader">
呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_vector3_ac5187e0ab8d45cda4a36dd38f34884e8_cgraph.png" border="0" usemap="#astructdesignlab_1_1_vector3_ac5187e0ab8d45cda4a36dd38f34884e8_cgraph" alt=""/></div>
<map name="astructdesignlab_1_1_vector3_ac5187e0ab8d45cda4a36dd38f34884e8_cgraph" id="astructdesignlab_1_1_vector3_ac5187e0ab8d45cda4a36dd38f34884e8_cgraph">
<area shape="rect" title="このベクトルを正規化する． &#160;&#160;絶対値が0のベクトルの場合，そのまま0ベクトルになる．" alt="" coords="5,39,135,81"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#a685643adba69e22d8f449434f1fce78b" title="単位ベクトルを返す． normalizeとは，ベクトルを正規化（単位ベクトルに変換）する操作を表す． &#160;&#160;絶対値が0のベクトルの場合，そのまま0ベクトルを返す．" alt="" coords="183,39,312,81"/>
<area shape="poly" title=" " alt="" coords="135,57,167,57,167,63,135,63"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#aa36dbc9d5ec20bf4e1161e0f2593776c" title="ベクトルの長さを返す．" alt="" coords="364,5,493,48"/>
<area shape="poly" title=" " alt="" coords="312,45,348,39,349,44,313,51"/>
<area shape="rect" href="namespacedesignlab_1_1math__utildocs#a92c055e0799991e88871e2a5d4f09280" title="C++において，小数同士の計算は誤差が出てしまう． 誤差込みで値が等しいか調べる．" alt="" coords="360,72,497,115"/>
<area shape="poly" title=" " alt="" coords="313,69,345,75,344,81,312,75"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#a3b3da21ea415ea86d6d409f2ad053897" title="ベクトルの長さの2乗を返す．" alt="" coords="545,5,683,48"/>
<area shape="poly" title=" " alt="" coords="494,24,530,24,530,29,494,29"/>
</map>
</div>

</div>
</div>
<a id="aaf3651416f231824ffd780b72f5bba27" name="aaf3651416f231824ffd780b72f5bba27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf3651416f231824ffd780b72f5bba27">&#9670;&#160;</a></span>ProjectedXY()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="structdesignlab_1_1_vector2docs">Vector2</a> designlab::Vector3::ProjectedXY </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>XY平面に射影したベクトルを返す． </p>
<dl class="section return"><dt>戻り値</dt><dd>XY平面に射影したベクトル． </dd></dl>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_vector3_aaf3651416f231824ffd780b72f5bba27_icgraph.png" border="0" usemap="#astructdesignlab_1_1_vector3_aaf3651416f231824ffd780b72f5bba27_icgraph" alt=""/></div>
<map name="astructdesignlab_1_1_vector3_aaf3651416f231824ffd780b72f5bba27_icgraph" id="astructdesignlab_1_1_vector3_aaf3651416f231824ffd780b72f5bba27_icgraph">
<area shape="rect" title="XY平面に射影したベクトルを返す．" alt="" coords="222,105,351,148"/>
<area shape="rect" href="classdesignlab_1_1_phantom_x_mk_i_idocs#ac027dc121a54e00da42ffcbab0028561" title="指定した脚の関節のグローバル座標と，角度を計算する． &#160;&#160;重たいのでグラフ探索や，描画処理中にループで使用することは推奨しない． &#160;&#160;間接の可動範囲外まで動いてしまう場合でも，答えを返す． &#160;&#160;目標座標..." alt="" coords="6,5,173,48"/>
<area shape="poly" title=" " alt="" coords="237,99,172,62,148,51,150,46,175,58,240,94"/>
<area shape="rect" href="classdesignlab_1_1_phantom_x_mk_i_idocs#aab0677aba41eed4d1138c6adacc27fa1" title="脚が可動範囲内にあるかどうかを判定する．" alt="" coords="6,72,173,115"/>
<area shape="poly" title=" " alt="" coords="206,116,173,110,174,105,207,111"/>
<area shape="rect" href="classdesignlab_1_1_robot_operator_for_gpgdocs#a240d9588144861d5556613811dc5433e" title="ロボットの動作を更新する．" alt="" coords="5,139,174,181"/>
<area shape="poly" title=" " alt="" coords="207,143,174,148,174,143,206,138"/>
<area shape="rect" href="classdesignlab_1_1_robot_operator_for_pathdocs#a1cd3621fbeb19e849d7a3a749aea8162" title="ロボットの動作を更新する．" alt="" coords="5,205,174,248"/>
<area shape="poly" title=" " alt="" coords="240,159,175,196,150,207,148,202,172,191,237,154"/>
</map>
</div>

</div>
</div>
<a id="a834e5d8c3c9f2701570fa22ffd4b4a00" name="a834e5d8c3c9f2701570fa22ffd4b4a00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a834e5d8c3c9f2701570fa22ffd4b4a00">&#9670;&#160;</a></span>ToCsvString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string designlab::Vector3::ToCsvString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>このベクトルをCSV形式の文字列にして返す． <br  />
 x, y, z の形式，小数点以下3桁まで． </p>
<dl class="section return"><dt>戻り値</dt><dd>このベクトルをCSV形式の文字列にしたもの． </dd></dl>

</div>
</div>
<a id="adced04a30051a7d7a5845a1d9a9d1c11" name="adced04a30051a7d7a5845a1d9a9d1c11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adced04a30051a7d7a5845a1d9a9d1c11">&#9670;&#160;</a></span>ToString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string designlab::Vector3::ToString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>このベクトルを文字列にして返す． <br  />
 (x, y, z) の形式，小数点以下3桁まで． </p>
<dl class="section return"><dt>戻り値</dt><dd>このベクトルを文字列にしたもの． </dd></dl>
<div class="dynheader">
呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_vector3_adced04a30051a7d7a5845a1d9a9d1c11_cgraph.png" border="0" usemap="#astructdesignlab_1_1_vector3_adced04a30051a7d7a5845a1d9a9d1c11_cgraph" alt=""/></div>
<map name="astructdesignlab_1_1_vector3_adced04a30051a7d7a5845a1d9a9d1c11_cgraph" id="astructdesignlab_1_1_vector3_adced04a30051a7d7a5845a1d9a9d1c11_cgraph">
<area shape="rect" title="このベクトルを文字列にして返す． &#160;&#160;(x, y, z) の形式，小数点以下3桁まで．" alt="" coords="5,5,135,48"/>
<area shape="rect" href="namespacedesignlab_1_1math__utildocs#a45276ca396d3aa1331b5bb5a4c849bbe" title="小数を文字列に変換する関数． &#160;&#160;C++ では C のフォーマットのように %3.3f とかで小数を文字列に変換できないため自作する．" alt="" coords="183,5,363,48"/>
<area shape="poly" title=" " alt="" coords="135,24,167,24,167,29,135,29"/>
</map>
</div>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_vector3_adced04a30051a7d7a5845a1d9a9d1c11_icgraph.png" border="0" usemap="#astructdesignlab_1_1_vector3_adced04a30051a7d7a5845a1d9a9d1c11_icgraph" alt=""/></div>
<map name="astructdesignlab_1_1_vector3_adced04a30051a7d7a5845a1d9a9d1c11_icgraph" id="astructdesignlab_1_1_vector3_adced04a30051a7d7a5845a1d9a9d1c11_icgraph">
<area shape="rect" title="このベクトルを文字列にして返す． &#160;&#160;(x, y, z) の形式，小数点以下3桁まで．" alt="" coords="499,72,628,115"/>
<area shape="rect" href="structdesignlab_1_1_robot_state_nodedocs#a7fa3f31f167ac1cf468d81509f55c407" title="ノードの情報を文字列に変換する関数． &#160;&#160;デバッグ用に詳細な情報を出力する．" alt="" coords="272,39,451,81"/>
<area shape="poly" title=" " alt="" coords="483,83,451,77,452,72,484,78"/>
<area shape="rect" href="classdesignlab_1_1_robot_operator_for_gpgdocs#a240d9588144861d5556613811dc5433e" title="ロボットの動作を更新する．" alt="" coords="277,105,446,148"/>
<area shape="poly" title=" " alt="" coords="484,109,446,115,445,110,483,104"/>
<area shape="rect" href="classdesignlab_1_1_system_main_graph_viewerdocs#a19d272521cd15d5e493e24ef5834c218" title="主要な処理を行う関数．" alt="" coords="18,5,211,48"/>
<area shape="poly" title=" " alt="" coords="256,48,211,42,212,37,257,43"/>
<area shape="rect" href="classdesignlab_1_1_system_main_simulationdocs#ab3579cf4bfec29b735c2c2c70b19e738" title="いままで int mainで行われた処理をまとめたもの． &#160;&#160;目標地点へ着くか，歩容計画に失敗した場合に，シミュレーションを終える． &#160;&#160;また，規定の回数シミュレーションしたら終了する．" alt="" coords="5,72,224,115"/>
<area shape="poly" title=" " alt="" coords="257,77,225,81,224,76,256,72"/>
</map>
</div>

</div>
</div>
<hr/>この構造体詳解は次のファイルから抽出されました:<ul>
<li>C:/Users/hasegawa/Desktop/main/program/gait-generation-by-graph-search/DesignLab/<a class="el" href="math__vector3_8h_sourcedocs">math_vector3.h</a></li>
<li>C:/Users/hasegawa/Desktop/main/program/gait-generation-by-graph-search/DesignLab/<b>math_vector3.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacedesignlabdocs">designlab</a></li><li class="navelem"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a></li>
    <li class="footer">構築: <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>

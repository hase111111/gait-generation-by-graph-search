<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>GaitGeneration by Graph Search: designlab::AsyncableData&lt; std::vector&lt; T &gt; &gt; クラステンプレート</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">GaitGeneration by Graph Search
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- 構築: Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'docs');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','検索');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('classdesignlab_1_1_asyncable_data_3_01std_1_1vector_3_01_t_01_4_01_4docs',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">読み取り中…</div>
<div class="SRStatus" id="Searching">検索中…</div>
<div class="SRStatus" id="NoMatches">一致する文字列を見つけられません</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">公開メンバ関数</a> &#124;
<a href="classdesignlab_1_1_asyncable_data_3_01std_1_1vector_3_01_t_01_4_01_4-membersdocs">全メンバ一覧</a>  </div>
  <div class="headertitle"><div class="title">designlab::AsyncableData&lt; std::vector&lt; T &gt; &gt; クラステンプレート<span class="mlabels"><span class="mlabel">final</span></span></div></div>
</div><!--header-->
<div class="contents">

<p>非同期処理を行う際に， データの更新回数とデータをまとめて扱うための構造体．( vector 版)  
 <a href="classdesignlab_1_1_asyncable_data_3_01std_1_1vector_3_01_t_01_4_01_4docs#details">[詳解]</a></p>

<p><code>#include &lt;<a class="el" href="asyncable__data_8h_sourcedocs">asyncable_data.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
公開メンバ関数</h2></td></tr>
<tr class="memitem:a8af7e54fb7fe2fe7ab4fcd958e5cbcbe" id="r_a8af7e54fb7fe2fe7ab4fcd958e5cbcbe"><td class="memItemLeft" align="right" valign="top"><a id="a8af7e54fb7fe2fe7ab4fcd958e5cbcbe" name="a8af7e54fb7fe2fe7ab4fcd958e5cbcbe"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>AsyncableData</b> (const std::vector&lt; T &gt; &amp;data)</td></tr>
<tr class="separator:a8af7e54fb7fe2fe7ab4fcd958e5cbcbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a290e3de3d87d08272287e53c895d0708" id="r_a290e3de3d87d08272287e53c895d0708"><td class="memItemLeft" align="right" valign="top"><a id="a290e3de3d87d08272287e53c895d0708" name="a290e3de3d87d08272287e53c895d0708"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>AsyncableData</b> (const <a class="el" href="classdesignlab_1_1_asyncable_datadocs">AsyncableData</a> &amp;)=delete</td></tr>
<tr class="memdesc:a290e3de3d87d08272287e53c895d0708"><td class="mdescLeft">&#160;</td><td class="mdescRight">コピーは禁止． <br /></td></tr>
<tr class="separator:a290e3de3d87d08272287e53c895d0708"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06c25a51743cf1f62a8b2d3014813c8d" id="r_a06c25a51743cf1f62a8b2d3014813c8d"><td class="memItemLeft" align="right" valign="top"><a id="a06c25a51743cf1f62a8b2d3014813c8d" name="a06c25a51743cf1f62a8b2d3014813c8d"></a>
<a class="el" href="classdesignlab_1_1_asyncable_datadocs">AsyncableData</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="classdesignlab_1_1_asyncable_datadocs">AsyncableData</a> &amp;)=delete</td></tr>
<tr class="memdesc:a06c25a51743cf1f62a8b2d3014813c8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">コピー代入は禁止． <br /></td></tr>
<tr class="separator:a06c25a51743cf1f62a8b2d3014813c8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae68dad734eec055ab65b6fca196e9664" id="r_ae68dad734eec055ab65b6fca196e9664"><td class="memItemLeft" align="right" valign="top"><a id="ae68dad734eec055ab65b6fca196e9664" name="ae68dad734eec055ab65b6fca196e9664"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>AsyncableData</b> (<a class="el" href="classdesignlab_1_1_asyncable_datadocs">AsyncableData</a> &amp;&amp;)=delete</td></tr>
<tr class="memdesc:ae68dad734eec055ab65b6fca196e9664"><td class="mdescLeft">&#160;</td><td class="mdescRight">ムーブは禁止． <br /></td></tr>
<tr class="separator:ae68dad734eec055ab65b6fca196e9664"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84defbb07398a6bc6cfa59fe7e2d7832" id="r_a84defbb07398a6bc6cfa59fe7e2d7832"><td class="memItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_asyncable_data_3_01std_1_1vector_3_01_t_01_4_01_4docs#a84defbb07398a6bc6cfa59fe7e2d7832">GetData</a> () const</td></tr>
<tr class="memdesc:a84defbb07398a6bc6cfa59fe7e2d7832"><td class="mdescLeft">&#160;</td><td class="mdescRight">値をコピーして返す． <br  />
 この時，read lockをかける． <br  />
 当然，データの更新回数はインクリメントされない．  <br /></td></tr>
<tr class="separator:a84defbb07398a6bc6cfa59fe7e2d7832"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17f4b06c17421fdb0c4677b7fa851abf" id="r_a17f4b06c17421fdb0c4677b7fa851abf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_asyncable_data_3_01std_1_1vector_3_01_t_01_4_01_4docs#a17f4b06c17421fdb0c4677b7fa851abf">SetData</a> (const std::vector&lt; T &gt; &amp;data)</td></tr>
<tr class="memdesc:a17f4b06c17421fdb0c4677b7fa851abf"><td class="mdescLeft">&#160;</td><td class="mdescRight">値を変更する． <br  />
 この時，write lockをかける． <br  />
 データの更新回数をインクリメントする．  <br /></td></tr>
<tr class="separator:a17f4b06c17421fdb0c4677b7fa851abf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9321f1aeb63fd49b7b69d0abb5b6c254" id="r_a9321f1aeb63fd49b7b69d0abb5b6c254"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_asyncable_data_3_01std_1_1vector_3_01_t_01_4_01_4docs#a9321f1aeb63fd49b7b69d0abb5b6c254">PushBack</a> (const T &amp;data)</td></tr>
<tr class="memdesc:a9321f1aeb63fd49b7b69d0abb5b6c254"><td class="mdescLeft">&#160;</td><td class="mdescRight">最後尾に値を追加する． <br  />
 この時，write lockをかける． <br  />
 データの更新回数をインクリメントする．  <br /></td></tr>
<tr class="separator:a9321f1aeb63fd49b7b69d0abb5b6c254"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ef476f681c7b7f1a367727c8a2129ef" id="r_a6ef476f681c7b7f1a367727c8a2129ef"><td class="memItemLeft" align="right" valign="top"><a id="a6ef476f681c7b7f1a367727c8a2129ef" name="a6ef476f681c7b7f1a367727c8a2129ef"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Clean</b> ()</td></tr>
<tr class="memdesc:a6ef476f681c7b7f1a367727c8a2129ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">値をすべて削除する. <br  />
 この時，write lockをかける． <br  />
 データの更新回数をインクリメントする． <br /></td></tr>
<tr class="separator:a6ef476f681c7b7f1a367727c8a2129ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4abebdba6e48344c3fced7b8d6d40d1e" id="r_a4abebdba6e48344c3fced7b8d6d40d1e"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_asyncable_data_3_01std_1_1vector_3_01_t_01_4_01_4docs#a4abebdba6e48344c3fced7b8d6d40d1e">GetSize</a> () const</td></tr>
<tr class="memdesc:a4abebdba6e48344c3fced7b8d6d40d1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">sizeを返す．要素の数を size_tで返す． <br  />
 この時，read lockをかける．  <br /></td></tr>
<tr class="separator:a4abebdba6e48344c3fced7b8d6d40d1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5abead1f6dbffa684c2521943704ca2f" id="r_a5abead1f6dbffa684c2521943704ca2f"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_asyncable_data_3_01std_1_1vector_3_01_t_01_4_01_4docs#a5abead1f6dbffa684c2521943704ca2f">GetUpdateCount</a> () const</td></tr>
<tr class="memdesc:a5abead1f6dbffa684c2521943704ca2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">データの更新回数を返す． <br  />
 この時，read lockをかける． <br  />
 この値を調べて，データの更新回数が変わっているかを確認することで， データの更新が必要かを確認する．  <br /></td></tr>
<tr class="separator:a5abead1f6dbffa684c2521943704ca2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">詳解</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename T&gt;<br />
class designlab::AsyncableData&lt; std::vector&lt; T &gt; &gt;</div><p>非同期処理を行う際に， データの更新回数とデータをまとめて扱うための構造体．( vector 版) </p>
<p>vector 版の AsyncableData． vector を入れて <a class="el" href="classdesignlab_1_1_asyncable_datadocs" title="非同期処理を行う際に，データの更新回数とデータをまとめて扱うためのクラス．">AsyncableData</a> を作成すると，こちらが呼ばれる． こちらもコピー・ムーブは禁止． </p>
</div><h2 class="groupheader">関数詳解</h2>
<a id="a84defbb07398a6bc6cfa59fe7e2d7832" name="a84defbb07398a6bc6cfa59fe7e2d7832"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84defbb07398a6bc6cfa59fe7e2d7832">&#9670;&#160;</a></span>GetData()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; T &gt; <a class="el" href="classdesignlab_1_1_asyncable_datadocs">designlab::AsyncableData</a>&lt; std::vector&lt; T &gt; &gt;::GetData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>値をコピーして返す． <br  />
 この時，read lockをかける． <br  />
 当然，データの更新回数はインクリメントされない． </p>
<dl class="section return"><dt>戻り値</dt><dd>値のコピー． </dd></dl>

</div>
</div>
<a id="a4abebdba6e48344c3fced7b8d6d40d1e" name="a4abebdba6e48344c3fced7b8d6d40d1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4abebdba6e48344c3fced7b8d6d40d1e">&#9670;&#160;</a></span>GetSize()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classdesignlab_1_1_asyncable_datadocs">designlab::AsyncableData</a>&lt; std::vector&lt; T &gt; &gt;::GetSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>sizeを返す．要素の数を size_tで返す． <br  />
 この時，read lockをかける． </p>
<dl class="section return"><dt>戻り値</dt><dd>要素の数． </dd></dl>

</div>
</div>
<a id="a5abead1f6dbffa684c2521943704ca2f" name="a5abead1f6dbffa684c2521943704ca2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5abead1f6dbffa684c2521943704ca2f">&#9670;&#160;</a></span>GetUpdateCount()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classdesignlab_1_1_asyncable_datadocs">designlab::AsyncableData</a>&lt; std::vector&lt; T &gt; &gt;::GetUpdateCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>データの更新回数を返す． <br  />
 この時，read lockをかける． <br  />
 この値を調べて，データの更新回数が変わっているかを確認することで， データの更新が必要かを確認する． </p>
<dl class="section return"><dt>戻り値</dt><dd>データの更新回数． </dd></dl>

</div>
</div>
<a id="a9321f1aeb63fd49b7b69d0abb5b6c254" name="a9321f1aeb63fd49b7b69d0abb5b6c254"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9321f1aeb63fd49b7b69d0abb5b6c254">&#9670;&#160;</a></span>PushBack()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classdesignlab_1_1_asyncable_datadocs">designlab::AsyncableData</a>&lt; std::vector&lt; T &gt; &gt;::PushBack </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>最後尾に値を追加する． <br  />
 この時，write lockをかける． <br  />
 データの更新回数をインクリメントする． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>後ろに追加する値．const参照渡しされる． </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a17f4b06c17421fdb0c4677b7fa851abf" name="a17f4b06c17421fdb0c4677b7fa851abf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17f4b06c17421fdb0c4677b7fa851abf">&#9670;&#160;</a></span>SetData()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classdesignlab_1_1_asyncable_datadocs">designlab::AsyncableData</a>&lt; std::vector&lt; T &gt; &gt;::SetData </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>値を変更する． <br  />
 この時，write lockをかける． <br  />
 データの更新回数をインクリメントする． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>セットする値．const参照渡しされる． </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>このクラス詳解は次のファイルから抽出されました:<ul>
<li>C:/Users/hasegawa/Desktop/main/program/gait-generation-by-graph-search/DesignLab/<a class="el" href="asyncable__data_8h_sourcedocs">asyncable_data.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacedesignlabdocs">designlab</a></li><li class="navelem"><a class="el" href="classdesignlab_1_1_asyncable_data_3_01std_1_1vector_3_01_t_01_4_01_4docs">AsyncableData&lt; std::vector&lt; T &gt; &gt;</a></li>
    <li class="footer">構築: <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>

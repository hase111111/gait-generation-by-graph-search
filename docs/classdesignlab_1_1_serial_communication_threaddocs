<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>GaitGeneration by Graph Search: designlab::SerialCommunicationThread クラス</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">GaitGeneration by Graph Search
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- 構築: Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'docs');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','検索');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('classdesignlab_1_1_serial_communication_threaddocs',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">読み取り中…</div>
<div class="SRStatus" id="Searching">検索中…</div>
<div class="SRStatus" id="NoMatches">一致する文字列を見つけられません</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">公開メンバ関数</a> &#124;
<a href="classdesignlab_1_1_serial_communication_thread-membersdocs">全メンバ一覧</a>  </div>
  <div class="headertitle"><div class="title">designlab::SerialCommunicationThread クラス<span class="mlabels"><span class="mlabel">final</span></span></div></div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
公開メンバ関数</h2></td></tr>
<tr class="memitem:ad6a5c0b28c7f63c0924a5c27f39d199d" id="r_ad6a5c0b28c7f63c0924a5c27f39d199d"><td class="memItemLeft" align="right" valign="top"><a id="ad6a5c0b28c7f63c0924a5c27f39d199d" name="ad6a5c0b28c7f63c0924a5c27f39d199d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Loop</b> ()</td></tr>
<tr class="separator:ad6a5c0b28c7f63c0924a5c27f39d199d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04590883c592977745185f236506e7b0" id="r_a04590883c592977745185f236506e7b0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_serial_communication_threaddocs#a04590883c592977745185f236506e7b0">SetWriteData</a> (const std::string &amp;str)</td></tr>
<tr class="memdesc:a04590883c592977745185f236506e7b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">指定した文字列をシリアル通信で送信する． この時，排他制御を行う．  <br /></td></tr>
<tr class="separator:a04590883c592977745185f236506e7b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a844ecdd15d3c37528db65ff20eaae386" id="r_a844ecdd15d3c37528db65ff20eaae386"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_serial_communication_threaddocs#a844ecdd15d3c37528db65ff20eaae386">GetTopReadData</a> () const</td></tr>
<tr class="memdesc:a844ecdd15d3c37528db65ff20eaae386"><td class="mdescLeft">&#160;</td><td class="mdescRight">シリアル通信で受信した最新の文字列を取得する． この時，排他制御を行う．  <br /></td></tr>
<tr class="separator:a844ecdd15d3c37528db65ff20eaae386"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ad607369a0d7ff3dabb82270ddbd8be" id="r_a8ad607369a0d7ff3dabb82270ddbd8be"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_serial_communication_threaddocs#a8ad607369a0d7ff3dabb82270ddbd8be">GetAllReadData</a> () const</td></tr>
<tr class="memdesc:a8ad607369a0d7ff3dabb82270ddbd8be"><td class="mdescLeft">&#160;</td><td class="mdescRight">シリアル通信で受信した文字列を全て取得する． この時，排他制御を行う．  <br /></td></tr>
<tr class="separator:a8ad607369a0d7ff3dabb82270ddbd8be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4758dfcefeec777df7c8b77456d8242" id="r_ae4758dfcefeec777df7c8b77456d8242"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_serial_communication_threaddocs#ae4758dfcefeec777df7c8b77456d8242">GetReadData</a> (const int num) const</td></tr>
<tr class="memdesc:ae4758dfcefeec777df7c8b77456d8242"><td class="mdescLeft">&#160;</td><td class="mdescRight">シリアル通信で受信した文字列の中から指定した数だけ取得する． この時，排他制御を行う．  <br /></td></tr>
<tr class="separator:ae4758dfcefeec777df7c8b77456d8242"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a452462cadb075b9d4705c3c23fc61647" id="r_a452462cadb075b9d4705c3c23fc61647"><td class="memItemLeft" align="right" valign="top"><a id="a452462cadb075b9d4705c3c23fc61647" name="a452462cadb075b9d4705c3c23fc61647"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>EndThread</b> ()</td></tr>
<tr class="memdesc:a452462cadb075b9d4705c3c23fc61647"><td class="mdescLeft">&#160;</td><td class="mdescRight">シリアル通信のスレッドを終了する． <br /></td></tr>
<tr class="separator:a452462cadb075b9d4705c3c23fc61647"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d87173fcba71daeda0bf775df27904b" id="r_a7d87173fcba71daeda0bf775df27904b"><td class="memItemLeft" align="right" valign="top"><a id="a7d87173fcba71daeda0bf775df27904b" name="a7d87173fcba71daeda0bf775df27904b"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEnd</b> () const</td></tr>
<tr class="separator:a7d87173fcba71daeda0bf775df27904b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">関数詳解</h2>
<a id="a8ad607369a0d7ff3dabb82270ddbd8be" name="a8ad607369a0d7ff3dabb82270ddbd8be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ad607369a0d7ff3dabb82270ddbd8be">&#9670;&#160;</a></span>GetAllReadData()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; designlab::SerialCommunicationThread::GetAllReadData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>シリアル通信で受信した文字列を全て取得する． この時，排他制御を行う． </p>
<dl class="section return"><dt>戻り値</dt><dd>受信した文字列群． </dd></dl>

</div>
</div>
<a id="ae4758dfcefeec777df7c8b77456d8242" name="ae4758dfcefeec777df7c8b77456d8242"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4758dfcefeec777df7c8b77456d8242">&#9670;&#160;</a></span>GetReadData()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; designlab::SerialCommunicationThread::GetReadData </td>
          <td>(</td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>num</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>シリアル通信で受信した文字列の中から指定した数だけ取得する． この時，排他制御を行う． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num</td><td>取得する文字列の数． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>受信した文字列群． </dd></dl>

</div>
</div>
<a id="a844ecdd15d3c37528db65ff20eaae386" name="a844ecdd15d3c37528db65ff20eaae386"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a844ecdd15d3c37528db65ff20eaae386">&#9670;&#160;</a></span>GetTopReadData()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string designlab::SerialCommunicationThread::GetTopReadData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>シリアル通信で受信した最新の文字列を取得する． この時，排他制御を行う． </p>
<dl class="section return"><dt>戻り値</dt><dd>受信した文字列． </dd></dl>

</div>
</div>
<a id="a04590883c592977745185f236506e7b0" name="a04590883c592977745185f236506e7b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04590883c592977745185f236506e7b0">&#9670;&#160;</a></span>SetWriteData()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void designlab::SerialCommunicationThread::SetWriteData </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>指定した文字列をシリアル通信で送信する． この時，排他制御を行う． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>送信する文字列． </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="classdesignlab_1_1_serial_communication_thread_a04590883c592977745185f236506e7b0_icgraph.png" border="0" usemap="#aclassdesignlab_1_1_serial_communication_thread_a04590883c592977745185f236506e7b0_icgraph" alt=""/></div>
<map name="aclassdesignlab_1_1_serial_communication_thread_a04590883c592977745185f236506e7b0_icgraph" id="aclassdesignlab_1_1_serial_communication_thread_a04590883c592977745185f236506e7b0_icgraph">
<area shape="rect" title="指定した文字列をシリアル通信で送信する． この時，排他制御を行う．" alt="" coords="248,39,455,81"/>
<area shape="rect" href="classdesignlab_1_1_dxlib_gui_robot_controldocs#a1af38aed3eb6e1a916c257e6ed3945f0" title="コンストラクタでWindowのサイズと，カメラの管理を行うクラスを受け取る．" alt="" coords="5,5,200,48"/>
<area shape="poly" title=" " alt="" coords="232,47,200,42,200,37,232,41"/>
<area shape="rect" href="classdesignlab_1_1_dxlib_gui_robot_controldocs#aa075bae9ff758183dbb734c67609122c" title="GUIの更新，毎フレーム実行すること．" alt="" coords="19,72,186,115"/>
<area shape="poly" title=" " alt="" coords="233,79,187,85,186,79,232,73"/>
</map>
</div>

</div>
</div>
<hr/>このクラス詳解は次のファイルから抽出されました:<ul>
<li>C:/Users/hasegawa/Desktop/main/program/gait-generation-by-graph-search/DesignLab/<a class="el" href="serial__communication__thread_8h_sourcedocs">serial_communication_thread.h</a></li>
<li>C:/Users/hasegawa/Desktop/main/program/gait-generation-by-graph-search/DesignLab/<b>serial_communication_thread.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacedesignlabdocs">designlab</a></li><li class="navelem"><a class="el" href="classdesignlab_1_1_serial_communication_threaddocs">SerialCommunicationThread</a></li>
    <li class="footer">構築: <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>

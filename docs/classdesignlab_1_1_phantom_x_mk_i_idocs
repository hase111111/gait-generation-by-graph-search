<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>GaitGeneration by Graph Search: designlab::PhantomXMkII クラス</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">GaitGeneration by Graph Search
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- 構築: Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'docs');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','検索');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('classdesignlab_1_1_phantom_x_mk_i_idocs',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">読み取り中…</div>
<div class="SRStatus" id="Searching">検索中…</div>
<div class="SRStatus" id="NoMatches">一致する文字列を見つけられません</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">公開メンバ関数</a> &#124;
<a href="classdesignlab_1_1_phantom_x_mk_i_i-membersdocs">全メンバ一覧</a>  </div>
  <div class="headertitle"><div class="title">designlab::PhantomXMkII クラス</div></div>
</div><!--header-->
<div class="contents">

<p>PhantomX mk-2 の状態を計算するクラス．  
 <a href="classdesignlab_1_1_phantom_x_mk_i_idocs#details">[詳解]</a></p>

<p><code>#include &lt;<a class="el" href="phantomx__mk2_8h_sourcedocs">phantomx_mk2.h</a>&gt;</code></p>
<div class="dynheader">
designlab::PhantomXMkII の継承関係図</div>
<div class="dyncontent">
<div class="center"><img src="classdesignlab_1_1_phantom_x_mk_i_i__inherit__graph.png" border="0" usemap="#adesignlab_1_1_phantom_x_mk_i_i_inherit__map" alt="Inheritance graph"/></div>
<map name="adesignlab_1_1_phantom_x_mk_i_i_inherit__map" id="adesignlab_1_1_phantom_x_mk_i_i_inherit__map">
<area shape="rect" title="PhantomX mk&#45;2 の状態を計算するクラス．" alt="" coords="254,113,421,140"/>
<area shape="rect" href="classdesignlab_1_1_i_hexapod_coordinate_converterdocs" title="ロボットは重心位置・アクチュエータなど様々な点を基準とする座標系を持つ． これらを相互に変換する処理のインターフェース．" alt="" coords="5,5,206,48"/>
<area shape="poly" title=" " alt="" coords="191,51,207,58,313,110,310,115,205,62,189,56"/>
<area shape="rect" href="classdesignlab_1_1_i_hexapod_joint_calculatordocs" title="間接角度や角速度を計算する処理のインターフェース．" alt="" coords="23,72,188,115"/>
<area shape="poly" title=" " alt="" coords="204,105,254,112,253,117,203,110"/>
<area shape="rect" href="classdesignlab_1_1_i_hexapod_state_presenterdocs" title="6脚ロボットの状態を表示するクラス．" alt="" coords="21,139,190,181"/>
<area shape="poly" title=" " alt="" coords="205,143,253,136,253,141,206,148"/>
<area shape="rect" href="classdesignlab_1_1_i_hexapod_posture_validatordocs" title="6脚ロボットが有効な姿勢をとっているかを チェックする処理のインターフェース．" alt="" coords="14,205,197,248"/>
<area shape="poly" title=" " alt="" coords="189,197,205,191,310,138,313,143,207,196,191,202"/>
</map>
<center><span class="legend">[<a target="top" href="graph_legenddocs">凡例</a>]</span></center></div>
<div class="dynheader">
designlab::PhantomXMkII 連携図</div>
<div class="dyncontent">
<div class="center"><img src="classdesignlab_1_1_phantom_x_mk_i_i__coll__graph.png" border="0" usemap="#adesignlab_1_1_phantom_x_mk_i_i_coll__map" alt="Collaboration graph"/></div>
<map name="adesignlab_1_1_phantom_x_mk_i_i_coll__map" id="adesignlab_1_1_phantom_x_mk_i_i_coll__map">
<area shape="rect" title="PhantomX mk&#45;2 の状態を計算するクラス．" alt="" coords="254,113,421,140"/>
<area shape="rect" href="classdesignlab_1_1_i_hexapod_coordinate_converterdocs" title="ロボットは重心位置・アクチュエータなど様々な点を基準とする座標系を持つ． これらを相互に変換する処理のインターフェース．" alt="" coords="5,5,206,48"/>
<area shape="poly" title=" " alt="" coords="191,51,207,58,313,110,310,115,205,62,189,56"/>
<area shape="rect" href="classdesignlab_1_1_i_hexapod_joint_calculatordocs" title="間接角度や角速度を計算する処理のインターフェース．" alt="" coords="23,72,188,115"/>
<area shape="poly" title=" " alt="" coords="204,105,254,112,253,117,203,110"/>
<area shape="rect" href="classdesignlab_1_1_i_hexapod_state_presenterdocs" title="6脚ロボットの状態を表示するクラス．" alt="" coords="21,139,190,181"/>
<area shape="poly" title=" " alt="" coords="205,143,253,136,253,141,206,148"/>
<area shape="rect" href="classdesignlab_1_1_i_hexapod_posture_validatordocs" title="6脚ロボットが有効な姿勢をとっているかを チェックする処理のインターフェース．" alt="" coords="14,205,197,248"/>
<area shape="poly" title=" " alt="" coords="189,197,205,191,310,138,313,143,207,196,191,202"/>
</map>
<center><span class="legend">[<a target="top" href="graph_legenddocs">凡例</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
公開メンバ関数</h2></td></tr>
<tr class="memitem:a25a758626f406071b19c69efc0a7b42d" id="r_a25a758626f406071b19c69efc0a7b42d"><td class="memItemLeft" align="right" valign="top"><a id="a25a758626f406071b19c69efc0a7b42d" name="a25a758626f406071b19c69efc0a7b42d"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>PhantomXMkII</b> (const <a class="el" href="structdesignlab_1_1_phantom_x_mk_i_i_parameter_recorddocs">PhantomXMkIIParameterRecord</a> &amp;parameter_record)</td></tr>
<tr class="separator:a25a758626f406071b19c69efc0a7b42d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac027dc121a54e00da42ffcbab0028561" id="r_ac027dc121a54e00da42ffcbab0028561"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structdesignlab_1_1_hexapod_joint_statedocs">HexapodJointState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs#ac027dc121a54e00da42ffcbab0028561">CalculateJointState</a> (const int leg_index, const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;leg_pos) const noexcept override</td></tr>
<tr class="memdesc:ac027dc121a54e00da42ffcbab0028561"><td class="mdescLeft">&#160;</td><td class="mdescRight">指定した脚の関節のグローバル座標と，角度を計算する． <br  />
 重たいのでグラフ探索や，描画処理中にループで使用することは推奨しない． <br  />
 間接の可動範囲外まで動いてしまう場合でも，答えを返す． <br  />
 目標座標に届かない場合は，最も近い座標まで脚を伸ばし， 戻り値の is_in_range を false にする．  <br /></td></tr>
<tr class="separator:ac027dc121a54e00da42ffcbab0028561"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd4f0edc022211d1ddd42cc7308e4ffd" id="r_acd4f0edc022211d1ddd42cc7308e4ffd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs#acd4f0edc022211d1ddd42cc7308e4ffd">IsValidJointState</a> (const int leg_index, const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;leg_pos, const <a class="el" href="structdesignlab_1_1_hexapod_joint_statedocs">HexapodJointState</a> &amp;joint_state) const noexcept override</td></tr>
<tr class="memdesc:acd4f0edc022211d1ddd42cc7308e4ffd"><td class="mdescLeft">&#160;</td><td class="mdescRight">指定した脚のHexapodJointStateが正しく計算できているかを調べる． <br  />
 目標座標に届かない場合や，間接の可動範囲外まで動いてしまう場合， 戻り値は false になる．  <br /></td></tr>
<tr class="separator:acd4f0edc022211d1ddd42cc7308e4ffd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0630fa1d537f7e00aa422a83c98ebdda" id="r_a0630fa1d537f7e00aa422a83c98ebdda"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs#a0630fa1d537f7e00aa422a83c98ebdda">ConvertGlobalToLegCoordinate</a> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;converted_position, int leg_index, const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;center_of_mass_global, const <a class="el" href="structdesignlab_1_1_quaterniondocs">Quaternion</a> &amp;robot_quat, const bool consider_rot) const override</td></tr>
<tr class="memdesc:a0630fa1d537f7e00aa422a83c98ebdda"><td class="mdescLeft">&#160;</td><td class="mdescRight">グローバル座標系で表現されている座標を，脚座標系に変換する．  <br /></td></tr>
<tr class="separator:a0630fa1d537f7e00aa422a83c98ebdda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a028f4e024ebebca50325beef3444bfc5" id="r_a028f4e024ebebca50325beef3444bfc5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs#a028f4e024ebebca50325beef3444bfc5">ConvertLegToGlobalCoordinate</a> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;converted_position, int leg_index, const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;center_of_mass_global, const <a class="el" href="structdesignlab_1_1_quaterniondocs">Quaternion</a> &amp;robot_quat, const bool consider_rot) const override</td></tr>
<tr class="memdesc:a028f4e024ebebca50325beef3444bfc5"><td class="mdescLeft">&#160;</td><td class="mdescRight">脚座標系で表現されている座標を，グローバル座標系に変換する．  <br /></td></tr>
<tr class="separator:a028f4e024ebebca50325beef3444bfc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4b923566d06eef5f765b1e7afdd57ae" id="r_ae4b923566d06eef5f765b1e7afdd57ae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs#ae4b923566d06eef5f765b1e7afdd57ae">ConvertRobotToGlobalCoordinate</a> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;converted_position, const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;center_of_mass_global, const <a class="el" href="structdesignlab_1_1_quaterniondocs">Quaternion</a> &amp;robot_quat, const bool consider_rot) const override</td></tr>
<tr class="memdesc:ae4b923566d06eef5f765b1e7afdd57ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">ロボット座標系で表現されている座標を，グローバル座標系に変換する．  <br /></td></tr>
<tr class="separator:ae4b923566d06eef5f765b1e7afdd57ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23f271c79b8151dbb64c4e441b19e1d6" id="r_a23f271c79b8151dbb64c4e441b19e1d6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs#a23f271c79b8151dbb64c4e441b19e1d6">ConvertRobotToLegCoordinate</a> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;converted_position, int leg_index) const</td></tr>
<tr class="memdesc:a23f271c79b8151dbb64c4e441b19e1d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">ロボット座標系で表現されている座標を，脚座標系に変換する．  <br /></td></tr>
<tr class="separator:a23f271c79b8151dbb64c4e441b19e1d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27befb91ff5b1954cd31a3a46d70e995" id="r_a27befb91ff5b1954cd31a3a46d70e995"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs#a27befb91ff5b1954cd31a3a46d70e995">ConvertLegToRobotCoordinate</a> (const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;converted_position, int leg_index) const</td></tr>
<tr class="memdesc:a27befb91ff5b1954cd31a3a46d70e995"><td class="mdescLeft">&#160;</td><td class="mdescRight">脚座標系で表現されている座標を，ロボット座標系に変換する．  <br /></td></tr>
<tr class="separator:a27befb91ff5b1954cd31a3a46d70e995"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac284a810420fd8f69883cdb22d611704" id="r_ac284a810420fd8f69883cdb22d611704"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs#ac284a810420fd8f69883cdb22d611704">GetFreeLegPosLegCoordinate</a> (int leg_index) const noexcept override</td></tr>
<tr class="memdesc:ac284a810420fd8f69883cdb22d611704"><td class="mdescLeft">&#160;</td><td class="mdescRight">遊脚する位置を返す，脚座標系．  <br /></td></tr>
<tr class="separator:ac284a810420fd8f69883cdb22d611704"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb11bfbb9551917334442fa9a9e38ffd" id="r_afb11bfbb9551917334442fa9a9e38ffd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs#afb11bfbb9551917334442fa9a9e38ffd">GetLegBasePosRobotCoordinate</a> (int leg_index) const noexcept override</td></tr>
<tr class="memdesc:afb11bfbb9551917334442fa9a9e38ffd"><td class="mdescLeft">&#160;</td><td class="mdescRight">脚の付け根の座標(leg base position )を取得する．ロボット座標系．  <br /></td></tr>
<tr class="separator:afb11bfbb9551917334442fa9a9e38ffd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52a929d7f1610aa2f074d6b84c386bdf" id="r_a52a929d7f1610aa2f074d6b84c386bdf"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs#a52a929d7f1610aa2f074d6b84c386bdf">GetGroundHeightMarginMin</a> () const noexcept override</td></tr>
<tr class="memdesc:a52a929d7f1610aa2f074d6b84c386bdf"><td class="mdescLeft">&#160;</td><td class="mdescRight">地面の最大高さと重心位置を最小どれだけ離すかを返す．  <br /></td></tr>
<tr class="separator:a52a929d7f1610aa2f074d6b84c386bdf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a346bba4678638b033dcc6f07b3a5389f" id="r_a346bba4678638b033dcc6f07b3a5389f"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs#a346bba4678638b033dcc6f07b3a5389f">GetGroundHeightMarginMax</a> () const noexcept override</td></tr>
<tr class="memdesc:a346bba4678638b033dcc6f07b3a5389f"><td class="mdescLeft">&#160;</td><td class="mdescRight">地面の最大高さと重心位置を最大どれだけ離すかを返す．  <br /></td></tr>
<tr class="separator:a346bba4678638b033dcc6f07b3a5389f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab0677aba41eed4d1138c6adacc27fa1" id="r_aab0677aba41eed4d1138c6adacc27fa1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs#aab0677aba41eed4d1138c6adacc27fa1">IsLegInRange</a> (int leg_index, const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;leg_pos) const override</td></tr>
<tr class="memdesc:aab0677aba41eed4d1138c6adacc27fa1"><td class="mdescLeft">&#160;</td><td class="mdescRight">脚が可動範囲内にあるかどうかを判定する．  <br /></td></tr>
<tr class="separator:aab0677aba41eed4d1138c6adacc27fa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeed1296b4886eb07bc095ca2b5e8c333" id="r_aeed1296b4886eb07bc095ca2b5e8c333"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs#aeed1296b4886eb07bc095ca2b5e8c333">IsLegInterfering</a> (const std::array&lt; <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>, <a class="el" href="classdesignlab_1_1_hexapod_constdocs#a8441e7e101e967ded7c357feb9670812">HexapodConst::kLegNum</a> &gt; &amp;leg_pos) const override</td></tr>
<tr class="memdesc:aeed1296b4886eb07bc095ca2b5e8c333"><td class="mdescLeft">&#160;</td><td class="mdescRight">脚が他の脚と干渉しているかどうかを判定する．  <br /></td></tr>
<tr class="separator:aeed1296b4886eb07bc095ca2b5e8c333"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a688e8dd6b7f92d5b1a4fa8d4fbcc2714" id="r_a688e8dd6b7f92d5b1a4fa8d4fbcc2714"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs#a688e8dd6b7f92d5b1a4fa8d4fbcc2714">CalculateStabilityMargin</a> (const <a class="el" href="namespacedesignlab_1_1leg__funcdocs#aeed0147f934052f177c0761b75bacc65">leg_func::LegStateBit</a> &amp;leg_state, const std::array&lt; <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>, <a class="el" href="classdesignlab_1_1_hexapod_constdocs#a8441e7e101e967ded7c357feb9670812">HexapodConst::kLegNum</a> &gt; &amp;leg_pos) const override</td></tr>
<tr class="memdesc:a688e8dd6b7f92d5b1a4fa8d4fbcc2714"><td class="mdescLeft">&#160;</td><td class="mdescRight">安定余裕(Stability Margin)を計算する． 詳しくは「不整地における歩行機械の静的安定性評価基準」 という論文を読んで欲しい． <br  />
 接地脚を繋いで作られる多角形の辺と重心の距離の最小値を計算する．  <br /></td></tr>
<tr class="separator:a688e8dd6b7f92d5b1a4fa8d4fbcc2714"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea0eea059d621c567e8c0a704d7f79c8" id="r_aea0eea059d621c567e8c0a704d7f79c8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs#aea0eea059d621c567e8c0a704d7f79c8">IsStable</a> (const <a class="el" href="namespacedesignlab_1_1leg__funcdocs#aeed0147f934052f177c0761b75bacc65">leg_func::LegStateBit</a> &amp;leg_state, const std::array&lt; <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>, <a class="el" href="classdesignlab_1_1_hexapod_constdocs#a8441e7e101e967ded7c357feb9670812">HexapodConst::kLegNum</a> &gt; &amp;leg_pos) const override</td></tr>
<tr class="memdesc:aea0eea059d621c567e8c0a704d7f79c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">安定余裕を用いて，静的に安定しているかどうかを判定する．  <br /></td></tr>
<tr class="separator:aea0eea059d621c567e8c0a704d7f79c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d84fda12ddad344e7de4c0e023ffd4f" id="r_a2d84fda12ddad344e7de4c0e023ffd4f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs#a2d84fda12ddad344e7de4c0e023ffd4f">IsBodyInterferingWithGround</a> (const <a class="el" href="structdesignlab_1_1_robot_state_nodedocs">RobotStateNode</a> &amp;node, const <a class="el" href="classdesignlab_1_1_divided_map_statedocs">DividedMapState</a> &amp;devide_map) const override</td></tr>
<tr class="memdesc:a2d84fda12ddad344e7de4c0e023ffd4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">胴体が地面と干渉しているかどうかを判定する．  <br /></td></tr>
<tr class="separator:a2d84fda12ddad344e7de4c0e023ffd4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classdesignlab_1_1_i_hexapod_coordinate_converter"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classdesignlab_1_1_i_hexapod_coordinate_converter')"><img src="closed.png" alt="-"/>&#160;基底クラス <a class="el" href="classdesignlab_1_1_i_hexapod_coordinate_converterdocs">designlab::IHexapodCoordinateConverter</a> に属する継承公開メンバ関数</td></tr>
<tr class="memitem:a22ef75b9b8d9afe3ef5933e8d727955b inherit pub_methods_classdesignlab_1_1_i_hexapod_coordinate_converter" id="r_a22ef75b9b8d9afe3ef5933e8d727955b"><td class="memItemLeft" align="right" valign="top">
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>~IHexapodCoordinateConverter</b> ()=default</td></tr>
<tr class="memdesc:a22ef75b9b8d9afe3ef5933e8d727955b inherit pub_methods_classdesignlab_1_1_i_hexapod_coordinate_converter"><td class="mdescLeft">&#160;</td><td class="mdescRight">継承するクラスはデストラクタを virtualにすること． <br /></td></tr>
<tr class="separator:a22ef75b9b8d9afe3ef5933e8d727955b inherit pub_methods_classdesignlab_1_1_i_hexapod_coordinate_converter"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classdesignlab_1_1_i_hexapod_joint_calculator"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classdesignlab_1_1_i_hexapod_joint_calculator')"><img src="closed.png" alt="-"/>&#160;基底クラス <a class="el" href="classdesignlab_1_1_i_hexapod_joint_calculatordocs">designlab::IHexapodJointCalculator</a> に属する継承公開メンバ関数</td></tr>
<tr class="memitem:a71c57b0148f940a472830c618ded593b inherit pub_methods_classdesignlab_1_1_i_hexapod_joint_calculator" id="r_a71c57b0148f940a472830c618ded593b"><td class="memItemLeft" align="right" valign="top">std::array&lt; <a class="el" href="structdesignlab_1_1_hexapod_joint_statedocs">HexapodJointState</a>, <a class="el" href="classdesignlab_1_1_hexapod_constdocs#a8441e7e101e967ded7c357feb9670812">HexapodConst::kLegNum</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_i_hexapod_joint_calculatordocs#a71c57b0148f940a472830c618ded593b">CalculateAllJointState</a> (const <a class="el" href="structdesignlab_1_1_robot_state_nodedocs">RobotStateNode</a> &amp;node) const noexcept</td></tr>
<tr class="memdesc:a71c57b0148f940a472830c618ded593b inherit pub_methods_classdesignlab_1_1_i_hexapod_joint_calculator"><td class="mdescLeft">&#160;</td><td class="mdescRight">全ての関節のグローバル座標と，角度を計算する． <br  />
 重たいのでグラフ探索や，描画処理中にループで使用することは推奨しない． <br  />
 間接の可動範囲外まで動いてしまう場合でも，答えを返す． <br  />
 目標座標に届かない場合は，最も近い座標まで脚を伸ばし， 戻り値の is_in_range を false にする．  <br /></td></tr>
<tr class="separator:a71c57b0148f940a472830c618ded593b inherit pub_methods_classdesignlab_1_1_i_hexapod_joint_calculator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae981b7e1b1515f84beaf0429fe0d6bc3 inherit pub_methods_classdesignlab_1_1_i_hexapod_joint_calculator" id="r_ae981b7e1b1515f84beaf0429fe0d6bc3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_i_hexapod_joint_calculatordocs#ae981b7e1b1515f84beaf0429fe0d6bc3">IsValidAllJointState</a> (const <a class="el" href="structdesignlab_1_1_robot_state_nodedocs">RobotStateNode</a> &amp;node, const std::array&lt; <a class="el" href="structdesignlab_1_1_hexapod_joint_statedocs">HexapodJointState</a>, <a class="el" href="classdesignlab_1_1_hexapod_constdocs#a8441e7e101e967ded7c357feb9670812">HexapodConst::kLegNum</a> &gt; &amp;joint_state) const noexcept</td></tr>
<tr class="memdesc:ae981b7e1b1515f84beaf0429fe0d6bc3 inherit pub_methods_classdesignlab_1_1_i_hexapod_joint_calculator"><td class="mdescLeft">&#160;</td><td class="mdescRight">HexapodJointStateが正しく計算できているかを調べる． <br  />
 目標座標に届かない場合や，間接の可動範囲外まで動いてしまう場合， 戻り値は false になる．  <br /></td></tr>
<tr class="separator:ae981b7e1b1515f84beaf0429fe0d6bc3 inherit pub_methods_classdesignlab_1_1_i_hexapod_joint_calculator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classdesignlab_1_1_i_hexapod_posture_validator"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classdesignlab_1_1_i_hexapod_posture_validator')"><img src="closed.png" alt="-"/>&#160;基底クラス <a class="el" href="classdesignlab_1_1_i_hexapod_posture_validatordocs">designlab::IHexapodPostureValidator</a> に属する継承公開メンバ関数</td></tr>
<tr class="memitem:a3abb48c6d7bfe266598759a9852268a2 inherit pub_methods_classdesignlab_1_1_i_hexapod_posture_validator" id="r_a3abb48c6d7bfe266598759a9852268a2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classdesignlab_1_1_i_hexapod_posture_validatordocs#a3abb48c6d7bfe266598759a9852268a2">IsAllLegInRange</a> (const <a class="el" href="namespacedesignlab_1_1leg__funcdocs#aeed0147f934052f177c0761b75bacc65">leg_func::LegStateBit</a> leg_state, const std::array&lt; <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>, <a class="el" href="classdesignlab_1_1_hexapod_constdocs#a8441e7e101e967ded7c357feb9670812">HexapodConst::kLegNum</a> &gt; &amp;leg_pos) const</td></tr>
<tr class="memdesc:a3abb48c6d7bfe266598759a9852268a2 inherit pub_methods_classdesignlab_1_1_i_hexapod_posture_validator"><td class="mdescLeft">&#160;</td><td class="mdescRight">全ての脚が可動範囲内にあるかどうかを判定する．  <br /></td></tr>
<tr class="separator:a3abb48c6d7bfe266598759a9852268a2 inherit pub_methods_classdesignlab_1_1_i_hexapod_posture_validator"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">詳解</h2>
<div class="textblock"><p>PhantomX mk-2 の状態を計算するクラス． </p>
</div><h2 class="groupheader">関数詳解</h2>
<a id="ac027dc121a54e00da42ffcbab0028561" name="ac027dc121a54e00da42ffcbab0028561"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac027dc121a54e00da42ffcbab0028561">&#9670;&#160;</a></span>CalculateJointState()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structdesignlab_1_1_hexapod_joint_statedocs">HexapodJointState</a> designlab::PhantomXMkII::CalculateJointState </td>
          <td>(</td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>leg_index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>leg_pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>指定した脚の関節のグローバル座標と，角度を計算する． <br  />
 重たいのでグラフ探索や，描画処理中にループで使用することは推奨しない． <br  />
 間接の可動範囲外まで動いてしまう場合でも，答えを返す． <br  />
 目標座標に届かない場合は，最も近い座標まで脚を伸ばし， 戻り値の is_in_range を false にする． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">leg_index</td><td>脚のインデックス． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">leg_pos</td><td>脚先座標，脚座標系． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>指定した脚の関節の状態． </dd></dl>

<p><a class="el" href="classdesignlab_1_1_i_hexapod_joint_calculatordocs#a263785f20728be6e2226eb0cb01fd169">designlab::IHexapodJointCalculator</a>を実装しています。</p>
<div class="dynheader">
呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="classdesignlab_1_1_phantom_x_mk_i_i_ac027dc121a54e00da42ffcbab0028561_cgraph.png" border="0" usemap="#aclassdesignlab_1_1_phantom_x_mk_i_i_ac027dc121a54e00da42ffcbab0028561_cgraph" alt=""/></div>
<map name="aclassdesignlab_1_1_phantom_x_mk_i_i_ac027dc121a54e00da42ffcbab0028561_cgraph" id="aclassdesignlab_1_1_phantom_x_mk_i_i_ac027dc121a54e00da42ffcbab0028561_cgraph">
<area shape="rect" title="指定した脚の関節のグローバル座標と，角度を計算する． &#160;&#160;重たいのでグラフ探索や，描画処理中にループで使用することは推奨しない． &#160;&#160;間接の可動範囲外まで動いてしまう場合でも，答えを返す． &#160;&#160;目標座標..." alt="" coords="5,101,173,144"/>
<area shape="rect" href="structdesignlab_1_1_vector2docs#ab62323b441e66a37e41668fb0ac7ae99" title="このベクトルの長さを返す．" alt="" coords="221,5,350,48"/>
<area shape="poly" title=" " alt="" coords="133,98,225,53,228,58,135,103"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#aa36dbc9d5ec20bf4e1161e0f2593776c" title="ベクトルの長さを返す．" alt="" coords="221,72,350,115"/>
<area shape="poly" title=" " alt="" coords="173,108,205,103,206,108,173,113"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#a3b3da21ea415ea86d6d409f2ad053897" title="ベクトルの長さの2乗を返す．" alt="" coords="398,101,535,144"/>
<area shape="poly" title=" " alt="" coords="173,123,221,124,350,124,382,123,382,129,350,129,221,129,173,128"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#aaf3651416f231824ffd780b72f5bba27" title="XY平面に射影したベクトルを返す．" alt="" coords="221,189,350,232"/>
<area shape="poly" title=" " alt="" coords="140,142,223,180,221,185,138,147"/>
<area shape="rect" href="structdesignlab_1_1_vector2docs#a80b722825f1793105702da0677867a08" title="このベクトルの長さの2乗を返す．" alt="" coords="398,5,535,48"/>
<area shape="poly" title=" " alt="" coords="351,24,383,24,383,29,351,29"/>
<area shape="rect" href="structdesignlab_1_1_vector2docs#a4ff63a4ad67617a23ed4206d994ecc84" title="自分・引数 の内積の結果を返す．" alt="" coords="583,13,741,40"/>
<area shape="poly" title=" " alt="" coords="536,24,568,24,568,29,536,29"/>
<area shape="poly" title=" " alt="" coords="351,101,383,106,382,112,350,106"/>
</map>
</div>

</div>
</div>
<a id="a688e8dd6b7f92d5b1a4fa8d4fbcc2714" name="a688e8dd6b7f92d5b1a4fa8d4fbcc2714"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a688e8dd6b7f92d5b1a4fa8d4fbcc2714">&#9670;&#160;</a></span>CalculateStabilityMargin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float designlab::PhantomXMkII::CalculateStabilityMargin </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacedesignlab_1_1leg__funcdocs#aeed0147f934052f177c0761b75bacc65">leg_func::LegStateBit</a> &amp;&#160;</td>
          <td class="paramname"><em>leg_state</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::array&lt; <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>, <a class="el" href="classdesignlab_1_1_hexapod_constdocs#a8441e7e101e967ded7c357feb9670812">HexapodConst::kLegNum</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>leg_pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>安定余裕(Stability Margin)を計算する． 詳しくは「不整地における歩行機械の静的安定性評価基準」 という論文を読んで欲しい． <br  />
 接地脚を繋いで作られる多角形の辺と重心の距離の最小値を計算する． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">leg_state</td><td>脚の状態．bitで表現される，遊脚・接地脚の情報を持つ． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">leg_pos</td><td>脚座標系における脚先の座標の配列． 脚先座標系とは脚の付け根を原点とし，軸はロボット座標系と同様な座標系． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>安定余裕．大きい方が安定となる，またこの値が0以下なら転倒する． </dd></dl>

<p><a class="el" href="classdesignlab_1_1_i_hexapod_posture_validatordocs#a0580e1f2da44b91fc37cf436fa0e92c2">designlab::IHexapodPostureValidator</a>を実装しています。</p>
<div class="dynheader">
呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="classdesignlab_1_1_phantom_x_mk_i_i_a688e8dd6b7f92d5b1a4fa8d4fbcc2714_cgraph.png" border="0" usemap="#aclassdesignlab_1_1_phantom_x_mk_i_i_a688e8dd6b7f92d5b1a4fa8d4fbcc2714_cgraph" alt=""/></div>
<map name="aclassdesignlab_1_1_phantom_x_mk_i_i_a688e8dd6b7f92d5b1a4fa8d4fbcc2714_cgraph" id="aclassdesignlab_1_1_phantom_x_mk_i_i_a688e8dd6b7f92d5b1a4fa8d4fbcc2714_cgraph">
<area shape="rect" title="安定余裕(Stability Margin)を計算する． 詳しくは「不整地における歩行機械の静的安定性評価基準」 という論文を読んで欲しい． &#160;&#160;接地脚を繋いで作られる多角形の辺と重心の距離の最小値を計..." alt="" coords="5,39,175,81"/>
<area shape="rect" href="structdesignlab_1_1_vector2docs#ab3002b222969339234b908a42a735f44" title="自分×引数 の外積の結果を返す．" alt="" coords="223,5,352,48"/>
<area shape="poly" title=" " alt="" coords="175,43,207,37,208,43,175,48"/>
<area shape="rect" href="structdesignlab_1_1_vector2docs#a5b486befcef8a9c50ff78137783c3ba9" title="このベクトルを正規化したベクトルを返す．" alt="" coords="223,72,352,115"/>
<area shape="poly" title=" " alt="" coords="175,72,208,77,207,83,175,77"/>
<area shape="rect" href="structdesignlab_1_1_vector2docs#ab62323b441e66a37e41668fb0ac7ae99" title="このベクトルの長さを返す．" alt="" coords="404,39,533,81"/>
<area shape="poly" title=" " alt="" coords="352,79,388,72,389,77,353,84"/>
<area shape="rect" href="namespacedesignlab_1_1math__utildocs#a92c055e0799991e88871e2a5d4f09280" title="C++において，小数同士の計算は誤差が出てしまう． 誤差込みで値が等しいか調べる．" alt="" coords="400,105,537,148"/>
<area shape="poly" title=" " alt="" coords="353,103,385,109,384,114,352,108"/>
<area shape="rect" href="structdesignlab_1_1_vector2docs#a80b722825f1793105702da0677867a08" title="このベクトルの長さの2乗を返す．" alt="" coords="585,39,723,81"/>
<area shape="poly" title=" " alt="" coords="534,57,570,57,570,63,534,63"/>
</map>
</div>

</div>
</div>
<a id="a0630fa1d537f7e00aa422a83c98ebdda" name="a0630fa1d537f7e00aa422a83c98ebdda"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0630fa1d537f7e00aa422a83c98ebdda">&#9670;&#160;</a></span>ConvertGlobalToLegCoordinate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> designlab::PhantomXMkII::ConvertGlobalToLegCoordinate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>converted_position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>leg_index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>center_of_mass_global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_quaterniondocs">Quaternion</a> &amp;&#160;</td>
          <td class="paramname"><em>robot_quat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>consider_rot</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>グローバル座標系で表現されている座標を，脚座標系に変換する． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">converted_position</td><td>変換対象．グローバル座標系． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">leg_index</td><td>脚番号． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">center_of_mass_global</td><td>ロボットの重心の座標．グローバル座標系． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">robot_rot</td><td>ロボットの姿勢．角度はrad. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">consider_rot</td><td>ロボットの姿勢を考慮するかどうか． falseなら回転を考慮しない． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>脚座標系の座標．脚先座標系とは脚の付け根を原点とし， 軸はロボット座標系と同様な座標系． </dd></dl>

<p><a class="el" href="classdesignlab_1_1_i_hexapod_coordinate_converterdocs#a8295b3c4d51d1c48dbe01b37b23d94f4">designlab::IHexapodCoordinateConverter</a>を実装しています。</p>
<div class="dynheader">
呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="classdesignlab_1_1_phantom_x_mk_i_i_a0630fa1d537f7e00aa422a83c98ebdda_cgraph.png" border="0" usemap="#aclassdesignlab_1_1_phantom_x_mk_i_i_a0630fa1d537f7e00aa422a83c98ebdda_cgraph" alt=""/></div>
<map name="aclassdesignlab_1_1_phantom_x_mk_i_i_a0630fa1d537f7e00aa422a83c98ebdda_cgraph" id="aclassdesignlab_1_1_phantom_x_mk_i_i_a0630fa1d537f7e00aa422a83c98ebdda_cgraph">
<area shape="rect" title="グローバル座標系で表現されている座標を，脚座標系に変換する．" alt="" coords="5,47,212,89"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs#a893ee3dc143f059822f17ead2f716de1" title="クォータニオンの共役を返す． 共役なクォータニオンとは，ベクトル成分の符号を反転させたもの &#160;&#160;q = w + xi + yj + zk とすると， qの共役は w &#45; xi &#45; yj &#45; zk となる..." alt="" coords="270,5,417,48"/>
<area shape="poly" title=" " alt="" coords="212,47,254,40,255,45,212,52"/>
<area shape="rect" href="namespacedesignlabdocs#a703ec0b7e06057a8997a4b22d50c5c9d" title="回転させたベクトルを返す．三角関数の処理が多く重たいので注意．" alt="" coords="260,96,427,123"/>
<area shape="poly" title=" " alt="" coords="212,84,249,90,248,95,212,89"/>
<area shape="poly" title=" " alt="" coords="306,97,299,87,304,77,319,71,343,69,370,72,384,78,382,83,368,77,343,75,320,77,307,81,304,87,310,94"/>
<area shape="rect" href="namespacedesignlabdocs#a8183abef6391dd2b5c396f1fa3062294" title="クォータニオンから回転角行列への変換．" alt="" coords="475,96,657,123"/>
<area shape="poly" title=" " alt="" coords="427,107,459,107,459,112,427,112"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs#a2c504d31353e189b1fa7a83cfd60deba" title="正規化したクォータニオンを返す． &#160;&#160;クォータニオンの正規化とは，ノルムを1にすることを表す． &#160;&#160;クォータニオンqの正規化は，q / |q| で求められる．" alt="" coords="705,88,853,131"/>
<area shape="poly" title=" " alt="" coords="658,107,690,107,690,112,658,112"/>
</map>
</div>

</div>
</div>
<a id="a028f4e024ebebca50325beef3444bfc5" name="a028f4e024ebebca50325beef3444bfc5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a028f4e024ebebca50325beef3444bfc5">&#9670;&#160;</a></span>ConvertLegToGlobalCoordinate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> designlab::PhantomXMkII::ConvertLegToGlobalCoordinate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>converted_position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>leg_index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>center_of_mass_global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_quaterniondocs">Quaternion</a> &amp;&#160;</td>
          <td class="paramname"><em>robot_quat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>consider_rot</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>脚座標系で表現されている座標を，グローバル座標系に変換する． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">converted_position</td><td>変換対象．脚座標系． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">leg_index</td><td>脚番号． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">center_of_mass_global</td><td>ロボットの重心の座標．グローバル座標系． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">robot_rot</td><td>ロボットの姿勢．角度は[rad]. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">consider_rot</td><td>ロボットの姿勢を考慮するかどうか． falseなら回転を考慮しない． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>グローバル座標系の座標． </dd></dl>

<p><a class="el" href="classdesignlab_1_1_i_hexapod_coordinate_converterdocs#aadbc8561508541269270a9a0e841272b">designlab::IHexapodCoordinateConverter</a>を実装しています。</p>
<div class="dynheader">
呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="classdesignlab_1_1_phantom_x_mk_i_i_a028f4e024ebebca50325beef3444bfc5_cgraph.png" border="0" usemap="#aclassdesignlab_1_1_phantom_x_mk_i_i_a028f4e024ebebca50325beef3444bfc5_cgraph" alt=""/></div>
<map name="aclassdesignlab_1_1_phantom_x_mk_i_i_a028f4e024ebebca50325beef3444bfc5_cgraph" id="aclassdesignlab_1_1_phantom_x_mk_i_i_a028f4e024ebebca50325beef3444bfc5_cgraph">
<area shape="rect" title="脚座標系で表現されている座標を，グローバル座標系に変換する．" alt="" coords="5,21,212,64"/>
<area shape="rect" href="namespacedesignlabdocs#a703ec0b7e06057a8997a4b22d50c5c9d" title="回転させたベクトルを返す．三角関数の処理が多く重たいので注意．" alt="" coords="260,29,427,56"/>
<area shape="poly" title=" " alt="" coords="212,40,244,40,244,45,212,45"/>
<area shape="poly" title=" " alt="" coords="306,30,299,21,304,11,319,5,343,3,370,5,384,12,382,16,368,10,343,8,320,10,307,15,304,20,310,27"/>
<area shape="rect" href="namespacedesignlabdocs#a8183abef6391dd2b5c396f1fa3062294" title="クォータニオンから回転角行列への変換．" alt="" coords="475,29,657,56"/>
<area shape="poly" title=" " alt="" coords="427,40,459,40,459,45,427,45"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs#a2c504d31353e189b1fa7a83cfd60deba" title="正規化したクォータニオンを返す． &#160;&#160;クォータニオンの正規化とは，ノルムを1にすることを表す． &#160;&#160;クォータニオンqの正規化は，q / |q| で求められる．" alt="" coords="705,21,853,64"/>
<area shape="poly" title=" " alt="" coords="658,40,690,40,690,45,658,45"/>
</map>
</div>

</div>
</div>
<a id="a27befb91ff5b1954cd31a3a46d70e995" name="a27befb91ff5b1954cd31a3a46d70e995"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27befb91ff5b1954cd31a3a46d70e995">&#9670;&#160;</a></span>ConvertLegToRobotCoordinate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> designlab::PhantomXMkII::ConvertLegToRobotCoordinate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>converted_position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>leg_index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>脚座標系で表現されている座標を，ロボット座標系に変換する． </p>

<p><a class="el" href="classdesignlab_1_1_i_hexapod_coordinate_converterdocs#a0bf6ddf64f65e05ad33345e83cf60fca">designlab::IHexapodCoordinateConverter</a>を実装しています。</p>

</div>
</div>
<a id="ae4b923566d06eef5f765b1e7afdd57ae" name="ae4b923566d06eef5f765b1e7afdd57ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4b923566d06eef5f765b1e7afdd57ae">&#9670;&#160;</a></span>ConvertRobotToGlobalCoordinate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> designlab::PhantomXMkII::ConvertRobotToGlobalCoordinate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>converted_position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>center_of_mass_global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_quaterniondocs">Quaternion</a> &amp;&#160;</td>
          <td class="paramname"><em>robot_quat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>consider_rot</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>ロボット座標系で表現されている座標を，グローバル座標系に変換する． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">converted_position</td><td>変換対象．ロボット座標系． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">center_of_mass_global</td><td>ロボットの重心の座標．グローバル座標系． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">robot_rot</td><td>ロボットの姿勢．角度は[rad]. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">consider_rot</td><td>ロボットの姿勢を考慮するかどうか． falseなら回転を考慮しない． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>グローバル座標系の座標． </dd></dl>

<p><a class="el" href="classdesignlab_1_1_i_hexapod_coordinate_converterdocs#ab50a98d841ca5b49871f0db44849ea80">designlab::IHexapodCoordinateConverter</a>を実装しています。</p>
<div class="dynheader">
呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="classdesignlab_1_1_phantom_x_mk_i_i_ae4b923566d06eef5f765b1e7afdd57ae_cgraph.png" border="0" usemap="#aclassdesignlab_1_1_phantom_x_mk_i_i_ae4b923566d06eef5f765b1e7afdd57ae_cgraph" alt=""/></div>
<map name="aclassdesignlab_1_1_phantom_x_mk_i_i_ae4b923566d06eef5f765b1e7afdd57ae_cgraph" id="aclassdesignlab_1_1_phantom_x_mk_i_i_ae4b923566d06eef5f765b1e7afdd57ae_cgraph">
<area shape="rect" title="ロボット座標系で表現されている座標を，グローバル座標系に変換する．" alt="" coords="5,21,225,64"/>
<area shape="rect" href="namespacedesignlabdocs#a703ec0b7e06057a8997a4b22d50c5c9d" title="回転させたベクトルを返す．三角関数の処理が多く重たいので注意．" alt="" coords="273,29,440,56"/>
<area shape="poly" title=" " alt="" coords="225,40,257,40,257,45,225,45"/>
<area shape="poly" title=" " alt="" coords="319,30,312,21,317,11,332,5,356,3,383,5,397,12,395,16,381,10,356,8,333,10,320,15,317,20,323,27"/>
<area shape="rect" href="namespacedesignlabdocs#a8183abef6391dd2b5c396f1fa3062294" title="クォータニオンから回転角行列への変換．" alt="" coords="488,29,670,56"/>
<area shape="poly" title=" " alt="" coords="440,40,472,40,472,45,440,45"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs#a2c504d31353e189b1fa7a83cfd60deba" title="正規化したクォータニオンを返す． &#160;&#160;クォータニオンの正規化とは，ノルムを1にすることを表す． &#160;&#160;クォータニオンqの正規化は，q / |q| で求められる．" alt="" coords="718,21,866,64"/>
<area shape="poly" title=" " alt="" coords="671,40,703,40,703,45,671,45"/>
</map>
</div>

</div>
</div>
<a id="a23f271c79b8151dbb64c4e441b19e1d6" name="a23f271c79b8151dbb64c4e441b19e1d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23f271c79b8151dbb64c4e441b19e1d6">&#9670;&#160;</a></span>ConvertRobotToLegCoordinate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> designlab::PhantomXMkII::ConvertRobotToLegCoordinate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>converted_position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>leg_index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>ロボット座標系で表現されている座標を，脚座標系に変換する． </p>

<p><a class="el" href="classdesignlab_1_1_i_hexapod_coordinate_converterdocs#a3b5ef449c5ee14689db1e4346281aabb">designlab::IHexapodCoordinateConverter</a>を実装しています。</p>

</div>
</div>
<a id="ac284a810420fd8f69883cdb22d611704" name="ac284a810420fd8f69883cdb22d611704"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac284a810420fd8f69883cdb22d611704">&#9670;&#160;</a></span>GetFreeLegPosLegCoordinate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> designlab::PhantomXMkII::GetFreeLegPosLegCoordinate </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>leg_index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>遊脚する位置を返す，脚座標系． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">leg_index</td><td>脚番号． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>遊脚する位置．脚座標系． </dd></dl>

<p><a class="el" href="classdesignlab_1_1_i_hexapod_state_presenterdocs#aba50aeb5639e4217ac58b784f3846ca1">designlab::IHexapodStatePresenter</a>を実装しています。</p>

</div>
</div>
<a id="a346bba4678638b033dcc6f07b3a5389f" name="a346bba4678638b033dcc6f07b3a5389f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a346bba4678638b033dcc6f07b3a5389f">&#9670;&#160;</a></span>GetGroundHeightMarginMax()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float designlab::PhantomXMkII::GetGroundHeightMarginMax </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>地面の最大高さと重心位置を最大どれだけ離すかを返す． </p>
<dl class="section return"><dt>戻り値</dt><dd>地面の最大高さと重心位置との最大距離 [mm]． </dd></dl>

<p><a class="el" href="classdesignlab_1_1_i_hexapod_state_presenterdocs#ad0e320e7e8d6db0755519760030b2062">designlab::IHexapodStatePresenter</a>を実装しています。</p>

</div>
</div>
<a id="a52a929d7f1610aa2f074d6b84c386bdf" name="a52a929d7f1610aa2f074d6b84c386bdf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a52a929d7f1610aa2f074d6b84c386bdf">&#9670;&#160;</a></span>GetGroundHeightMarginMin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float designlab::PhantomXMkII::GetGroundHeightMarginMin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>地面の最大高さと重心位置を最小どれだけ離すかを返す． </p>
<dl class="section return"><dt>戻り値</dt><dd>地面の最大高さと重心位置との最小距離 [mm]． </dd></dl>

<p><a class="el" href="classdesignlab_1_1_i_hexapod_state_presenterdocs#a7e216cda64b6ed42fa57902bb4406080">designlab::IHexapodStatePresenter</a>を実装しています。</p>

</div>
</div>
<a id="afb11bfbb9551917334442fa9a9e38ffd" name="afb11bfbb9551917334442fa9a9e38ffd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb11bfbb9551917334442fa9a9e38ffd">&#9670;&#160;</a></span>GetLegBasePosRobotCoordinate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> designlab::PhantomXMkII::GetLegBasePosRobotCoordinate </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>leg_index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>脚の付け根の座標(leg base position )を取得する．ロボット座標系． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">leg_index</td><td>脚番号． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>脚の付け根の座標．ロボット座標系． </dd></dl>

<p><a class="el" href="classdesignlab_1_1_i_hexapod_state_presenterdocs#a99f6ffa0668eaecfffcb47f6b38481dd">designlab::IHexapodStatePresenter</a>を実装しています。</p>

</div>
</div>
<a id="a2d84fda12ddad344e7de4c0e023ffd4f" name="a2d84fda12ddad344e7de4c0e023ffd4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d84fda12ddad344e7de4c0e023ffd4f">&#9670;&#160;</a></span>IsBodyInterferingWithGround()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool designlab::PhantomXMkII::IsBodyInterferingWithGround </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_robot_state_nodedocs">RobotStateNode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classdesignlab_1_1_divided_map_statedocs">DividedMapState</a> &amp;&#160;</td>
          <td class="paramname"><em>divided_map</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>胴体が地面と干渉しているかどうかを判定する． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>ロボットの状態． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">divided_map</td><td>地面の状態． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>胴体が地面と干渉していれば true．干渉していなければ false． </dd></dl>

<p><a class="el" href="classdesignlab_1_1_i_hexapod_posture_validatordocs#ad27f5c7d645036eb0ae0a5c1b769fc26">designlab::IHexapodPostureValidator</a>を実装しています。</p>
<div class="dynheader">
呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="classdesignlab_1_1_phantom_x_mk_i_i_a2d84fda12ddad344e7de4c0e023ffd4f_cgraph.png" border="0" usemap="#aclassdesignlab_1_1_phantom_x_mk_i_i_a2d84fda12ddad344e7de4c0e023ffd4f_cgraph" alt=""/></div>
<map name="aclassdesignlab_1_1_phantom_x_mk_i_i_a2d84fda12ddad344e7de4c0e023ffd4f_cgraph" id="aclassdesignlab_1_1_phantom_x_mk_i_i_a2d84fda12ddad344e7de4c0e023ffd4f_cgraph">
<area shape="rect" title="胴体が地面と干渉しているかどうかを判定する．" alt="" coords="5,105,200,148"/>
<area shape="rect" href="classdesignlab_1_1_divided_map_statedocs#a22c0df011d0506e6d5106c6acd931be9" title="指定した座標を DividedMap のインデックスに変換する． 範囲外の値を指定した場合でも，値を丸めずに返す． そのため，IsInMap で範囲内に存在するかどうかを確認する必要がある．" alt="" coords="248,5,429,48"/>
<area shape="poly" title=" " alt="" coords="148,102,247,58,261,52,263,57,249,62,150,107"/>
<area shape="rect" href="classdesignlab_1_1_divided_map_statedocs#a8dcc229f5560978d2a082b326191d6ee" title="指定した座標を DividedMap のインデックスに変換する． 範囲外の値を指定した場合でも，値を丸めずに返す． そのため，IsInMap で範囲内に存在するかどうかを確認する必要がある．" alt="" coords="248,72,429,115"/>
<area shape="poly" title=" " alt="" coords="200,110,232,106,232,111,200,116"/>
<area shape="rect" href="classdesignlab_1_1_divided_map_statedocs#a92457e5d1887c728425975db477ce3d9" title="格子状に切り分けられたマップから，最も高いZ座標を返す．" alt="" coords="248,139,429,181"/>
<area shape="poly" title=" " alt="" coords="200,138,232,142,232,148,200,143"/>
<area shape="rect" href="classdesignlab_1_1_divided_map_statedocs#a50c9ba4fb3821ba6a674f3657fe80f6f" title="指定した座標がマップの範囲内に存在するかどうかを返す．" alt="" coords="248,205,429,248"/>
<area shape="poly" title=" " alt="" coords="150,146,249,191,263,197,261,202,247,196,148,151"/>
</map>
</div>

</div>
</div>
<a id="aab0677aba41eed4d1138c6adacc27fa1" name="aab0677aba41eed4d1138c6adacc27fa1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab0677aba41eed4d1138c6adacc27fa1">&#9670;&#160;</a></span>IsLegInRange()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool designlab::PhantomXMkII::IsLegInRange </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>leg_index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>leg_pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>脚が可動範囲内にあるかどうかを判定する． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">leg_index</td><td>脚番号． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">leg_pos</td><td>脚座標系における脚先の座標． 脚先座標系とは脚の付け根を原点とし，軸はロボット座標系と同様な座標系． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>脚が可動範囲内にあれば true．可動範囲外にあれば false． </dd></dl>

<p><a class="el" href="classdesignlab_1_1_i_hexapod_posture_validatordocs#acbe4959b1131c73725f1b285d6d3e5f4">designlab::IHexapodPostureValidator</a>を実装しています。</p>
<div class="dynheader">
呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="classdesignlab_1_1_phantom_x_mk_i_i_aab0677aba41eed4d1138c6adacc27fa1_cgraph.png" border="0" usemap="#aclassdesignlab_1_1_phantom_x_mk_i_i_aab0677aba41eed4d1138c6adacc27fa1_cgraph" alt=""/></div>
<map name="aclassdesignlab_1_1_phantom_x_mk_i_i_aab0677aba41eed4d1138c6adacc27fa1_cgraph" id="aclassdesignlab_1_1_phantom_x_mk_i_i_aab0677aba41eed4d1138c6adacc27fa1_cgraph">
<area shape="rect" title="脚が可動範囲内にあるかどうかを判定する．" alt="" coords="5,39,173,81"/>
<area shape="rect" href="structdesignlab_1_1_vector2docs#a80b722825f1793105702da0677867a08" title="このベクトルの長さの2乗を返す．" alt="" coords="221,5,358,48"/>
<area shape="poly" title=" " alt="" coords="173,43,205,38,206,43,173,49"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#aaf3651416f231824ffd780b72f5bba27" title="XY平面に射影したベクトルを返す．" alt="" coords="225,72,354,115"/>
<area shape="poly" title=" " alt="" coords="173,71,210,77,209,83,173,77"/>
<area shape="rect" href="structdesignlab_1_1_vector2docs#a4ff63a4ad67617a23ed4206d994ecc84" title="自分・引数 の内積の結果を返す．" alt="" coords="406,13,563,40"/>
<area shape="poly" title=" " alt="" coords="359,24,390,24,390,29,359,29"/>
</map>
</div>

</div>
</div>
<a id="aeed1296b4886eb07bc095ca2b5e8c333" name="aeed1296b4886eb07bc095ca2b5e8c333"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeed1296b4886eb07bc095ca2b5e8c333">&#9670;&#160;</a></span>IsLegInterfering()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool designlab::PhantomXMkII::IsLegInterfering </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>, <a class="el" href="classdesignlab_1_1_hexapod_constdocs#a8441e7e101e967ded7c357feb9670812">HexapodConst::kLegNum</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>leg_pos</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>脚が他の脚と干渉しているかどうかを判定する． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">leg_pos</td><td>脚座標系における脚先の座標の配列． 脚先座標系とは脚の付け根を原点とし，軸はロボット座標系と同様な座標系． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>脚が他の脚と干渉していれば true．干渉していなければ false． </dd></dl>

<p><a class="el" href="classdesignlab_1_1_i_hexapod_posture_validatordocs#ac8b657b1f43281885769919dbe8e144d">designlab::IHexapodPostureValidator</a>を実装しています。</p>
<div class="dynheader">
呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="classdesignlab_1_1_phantom_x_mk_i_i_aeed1296b4886eb07bc095ca2b5e8c333_cgraph.png" border="0" usemap="#aclassdesignlab_1_1_phantom_x_mk_i_i_aeed1296b4886eb07bc095ca2b5e8c333_cgraph" alt=""/></div>
<map name="aclassdesignlab_1_1_phantom_x_mk_i_i_aeed1296b4886eb07bc095ca2b5e8c333_cgraph" id="aclassdesignlab_1_1_phantom_x_mk_i_i_aeed1296b4886eb07bc095ca2b5e8c333_cgraph">
<area shape="rect" title="脚が他の脚と干渉しているかどうかを判定する．" alt="" coords="5,39,173,81"/>
<area shape="rect" href="structdesignlab_1_1_line_segment2docs#a8e2bdbc5c825c119d1801aa07bf3555e" title="他の線分と交点が存在しているかどうか調べる関数．" alt="" coords="221,39,388,81"/>
<area shape="poly" title=" " alt="" coords="173,57,205,57,205,63,173,63"/>
<area shape="rect" href="structdesignlab_1_1_vector2docs#ab3002b222969339234b908a42a735f44" title="自分×引数 の外積の結果を返す．" alt="" coords="455,5,584,48"/>
<area shape="poly" title=" " alt="" coords="388,44,439,36,440,42,389,50"/>
<area shape="rect" href="structdesignlab_1_1_line_segment2docs#a8608ddbcf8e71c74186de4fc6420f4ee" title="引数の線分と自身が平行かどうか調べる関数． 全て constexpr 関数で処理できるため非常に高速．" alt="" coords="436,72,603,115"/>
<area shape="poly" title=" " alt="" coords="389,70,421,75,420,81,388,76"/>
<area shape="rect" href="namespacedesignlab_1_1math__utildocs#a92c055e0799991e88871e2a5d4f09280" title="C++において，小数同士の計算は誤差が出てしまう． 誤差込みで値が等しいか調べる．" alt="" coords="651,72,789,115"/>
<area shape="poly" title=" " alt="" coords="604,91,636,91,636,96,604,96"/>
</map>
</div>

</div>
</div>
<a id="aea0eea059d621c567e8c0a704d7f79c8" name="aea0eea059d621c567e8c0a704d7f79c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea0eea059d621c567e8c0a704d7f79c8">&#9670;&#160;</a></span>IsStable()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool designlab::PhantomXMkII::IsStable </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacedesignlab_1_1leg__funcdocs#aeed0147f934052f177c0761b75bacc65">leg_func::LegStateBit</a> &amp;&#160;</td>
          <td class="paramname"><em>leg_state</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::array&lt; <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>, <a class="el" href="classdesignlab_1_1_hexapod_constdocs#a8441e7e101e967ded7c357feb9670812">HexapodConst::kLegNum</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>leg_pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>安定余裕を用いて，静的に安定しているかどうかを判定する． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">leg_state</td><td>脚の状態．bitで表現される，遊脚・接地脚の情報を持つ． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">leg_pos</td><td>脚座標系における脚先の座標の配列． 脚先座標系とは脚の付け根を原点とし，軸はロボット座標系と同様な座標系． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>静的に安定していれば true．そうでなければ false． </dd></dl>

<p><a class="el" href="classdesignlab_1_1_i_hexapod_posture_validatordocs#ad636b14a850cccbf8e8a52c79db272b6">designlab::IHexapodPostureValidator</a>を実装しています。</p>

</div>
</div>
<a id="acd4f0edc022211d1ddd42cc7308e4ffd" name="acd4f0edc022211d1ddd42cc7308e4ffd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd4f0edc022211d1ddd42cc7308e4ffd">&#9670;&#160;</a></span>IsValidJointState()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool designlab::PhantomXMkII::IsValidJointState </td>
          <td>(</td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>leg_index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>leg_pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_hexapod_joint_statedocs">HexapodJointState</a> &amp;&#160;</td>
          <td class="paramname"><em>joint_state</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>指定した脚のHexapodJointStateが正しく計算できているかを調べる． <br  />
 目標座標に届かない場合や，間接の可動範囲外まで動いてしまう場合， 戻り値は false になる． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">leg_index</td><td>脚のインデックス． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">leg_pos</td><td>脚先座標，脚座標系． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">joint_state</td><td>関節の状態． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>計算が正しくできているならば true を返す． </dd></dl>

<p><a class="el" href="classdesignlab_1_1_i_hexapod_joint_calculatordocs#a444292445924403fac151b5f1b874d08">designlab::IHexapodJointCalculator</a>を実装しています。</p>

</div>
</div>
<hr/>このクラス詳解は次のファイルから抽出されました:<ul>
<li>C:/Users/hasegawa/Desktop/main/program/gait-generation-by-graph-search/DesignLab/<a class="el" href="phantomx__mk2_8h_sourcedocs">phantomx_mk2.h</a></li>
<li>C:/Users/hasegawa/Desktop/main/program/gait-generation-by-graph-search/DesignLab/<b>phantomx_mk2.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacedesignlabdocs">designlab</a></li><li class="navelem"><a class="el" href="classdesignlab_1_1_phantom_x_mk_i_idocs">PhantomXMkII</a></li>
    <li class="footer">構築: <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>GaitGeneration by Graph Search: designlab::RobotStateNode 構造体</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">GaitGeneration by Graph Search
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- 構築: Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'docs');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','検索');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('structdesignlab_1_1_robot_state_nodedocs',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">読み取り中…</div>
<div class="SRStatus" id="Searching">検索中…</div>
<div class="SRStatus" id="NoMatches">一致する文字列を見つけられません</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">公開メンバ関数</a> &#124;
<a href="#pub-static-methods">静的公開メンバ関数</a> &#124;
<a href="#pub-attribs">公開変数類</a> &#124;
<a href="#pub-static-attribs">静的公開変数類</a> &#124;
<a href="structdesignlab_1_1_robot_state_node-membersdocs">全メンバ一覧</a>  </div>
  <div class="headertitle"><div class="title">designlab::RobotStateNode 構造体<span class="mlabels"><span class="mlabel">final</span></span></div></div>
</div><!--header-->
<div class="contents">

<p>グラフ構造のためのノード(頂点)．旧名 LNODE  
 <a href="structdesignlab_1_1_robot_state_nodedocs#details">[詳解]</a></p>

<p><code>#include &lt;<a class="el" href="robot__state__node_8h_sourcedocs">robot_state_node.h</a>&gt;</code></p>
<div class="dynheader">
designlab::RobotStateNode 連携図</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_robot_state_node__coll__graph.png" border="0" usemap="#adesignlab_1_1_robot_state_node_coll__map" alt="Collaboration graph"/></div>
<map name="adesignlab_1_1_robot_state_node_coll__map" id="adesignlab_1_1_robot_state_node_coll__map">
<area shape="rect" title="グラフ構造のためのノード(頂点)．旧名 LNODE" alt="" coords="5,192,185,219"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs" title="3次元の位置ベクトルを表す構造体．" alt="" coords="30,5,160,32"/>
<area shape="poly" title=" " alt="" coords="94,48,89,96,90,149,95,191,90,192,85,149,83,96,88,47"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs" title="クォータニオンを表す構造体．" alt="" coords="235,99,382,125"/>
<area shape="poly" title=" " alt="" coords="140,36,280,96,278,100,137,41"/>
<area shape="poly" title=" " alt="" coords="266,134,126,194,124,189,264,129"/>
</map>
<center><span class="legend">[<a target="top" href="graph_legenddocs">凡例</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
公開メンバ関数</h2></td></tr>
<tr class="memitem:ade51b19f1be33835acf2c90283fcbcbe" id="r_ade51b19f1be33835acf2c90283fcbcbe"><td class="memItemLeft" align="right" valign="top"><a id="ade51b19f1be33835acf2c90283fcbcbe" name="ade51b19f1be33835acf2c90283fcbcbe"></a>
constexpr&#160;</td><td class="memItemRight" valign="bottom"><b>RobotStateNode</b> (const <a class="el" href="namespacedesignlab_1_1leg__funcdocs#aeed0147f934052f177c0761b75bacc65">leg_func::LegStateBit</a> &amp;state, const std::array&lt; <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>, <a class="el" href="classdesignlab_1_1_hexapod_constdocs#a8441e7e101e967ded7c357feb9670812">HexapodConst::kLegNum</a> &gt; &amp;pos, const std::array&lt; <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>, <a class="el" href="classdesignlab_1_1_hexapod_constdocs#a8441e7e101e967ded7c357feb9670812">HexapodConst::kLegNum</a> &gt; &amp;ref_pos, const <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a> &amp;com, const <a class="el" href="structdesignlab_1_1_quaterniondocs">Quaternion</a> &amp;q, const <a class="el" href="namespacedesignlabdocs#acc7368f4060dfdf3589ada8d62dd8a81">HexapodMove</a> move, const int parent, const int d)</td></tr>
<tr class="separator:ade51b19f1be33835acf2c90283fcbcbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a953b79229a8f876a2d3e2bf02a9eb494" id="r_a953b79229a8f876a2d3e2bf02a9eb494"><td class="memItemLeft" align="right" valign="top"><a id="a953b79229a8f876a2d3e2bf02a9eb494" name="a953b79229a8f876a2d3e2bf02a9eb494"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>RobotStateNode</b> (const <a class="el" href="structdesignlab_1_1_robot_state_nodedocs">RobotStateNode</a> &amp;other)=default</td></tr>
<tr class="separator:a953b79229a8f876a2d3e2bf02a9eb494"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25f1322c05b4f83d291a2d2a1910c36f" id="r_a25f1322c05b4f83d291a2d2a1910c36f"><td class="memItemLeft" align="right" valign="top"><a id="a25f1322c05b4f83d291a2d2a1910c36f" name="a25f1322c05b4f83d291a2d2a1910c36f"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>RobotStateNode</b> (<a class="el" href="structdesignlab_1_1_robot_state_nodedocs">RobotStateNode</a> &amp;&amp;other) noexcept=default</td></tr>
<tr class="separator:a25f1322c05b4f83d291a2d2a1910c36f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab86307f802c291b13888de5a528f4f36" id="r_ab86307f802c291b13888de5a528f4f36"><td class="memItemLeft" align="right" valign="top"><a id="ab86307f802c291b13888de5a528f4f36" name="ab86307f802c291b13888de5a528f4f36"></a>
<a class="el" href="structdesignlab_1_1_robot_state_nodedocs">RobotStateNode</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="structdesignlab_1_1_robot_state_nodedocs">RobotStateNode</a> &amp;other)=default</td></tr>
<tr class="separator:ab86307f802c291b13888de5a528f4f36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28bedf0298ebf8f315a21294dd111f45" id="r_a28bedf0298ebf8f315a21294dd111f45"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_robot_state_nodedocs#a28bedf0298ebf8f315a21294dd111f45">ChangeGlobalCenterOfMass</a> (const <a class="el" href="structdesignlab_1_1_vector3docs">designlab::Vector3</a> &amp;new_com, bool do_change_leg_base_pos)</td></tr>
<tr class="memdesc:a28bedf0298ebf8f315a21294dd111f45"><td class="mdescLeft">&#160;</td><td class="mdescRight">重心位置を変更する関数．  <br /></td></tr>
<tr class="separator:a28bedf0298ebf8f315a21294dd111f45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73efce324f3ffd5ead5fbc663acd96a2" id="r_a73efce324f3ffd5ead5fbc663acd96a2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_robot_state_nodedocs#a73efce324f3ffd5ead5fbc663acd96a2">ChangePosture</a> (const std::shared_ptr&lt; const <a class="el" href="classdesignlab_1_1_i_hexapod_coordinate_converterdocs">IHexapodCoordinateConverter</a> &gt; &amp;converter_ptr, const <a class="el" href="structdesignlab_1_1_quaterniondocs">designlab::Quaternion</a> &amp;new_posture)</td></tr>
<tr class="memdesc:a73efce324f3ffd5ead5fbc663acd96a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">クォータニオンを変更し，胴体を回転させる関数．  <br /></td></tr>
<tr class="separator:a73efce324f3ffd5ead5fbc663acd96a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58600c23d1383094c7f880a487ab61fb" id="r_a58600c23d1383094c7f880a487ab61fb"><td class="memItemLeft" align="right" valign="top"><a id="a58600c23d1383094c7f880a487ab61fb" name="a58600c23d1383094c7f880a487ab61fb"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>ChangeLootNode</b> ()</td></tr>
<tr class="memdesc:a58600c23d1383094c7f880a487ab61fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">自身を根ノードに変更する関数． <br  />
 depthを0に，parent_numを-1に初期化する． <br /></td></tr>
<tr class="separator:a58600c23d1383094c7f880a487ab61fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b3997cbc4ff0c8a48582608a12fca8e" id="r_a6b3997cbc4ff0c8a48582608a12fca8e"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_robot_state_nodedocs#a6b3997cbc4ff0c8a48582608a12fca8e">ChangeToNextNode</a> (const int parent_index_, const <a class="el" href="namespacedesignlabdocs#acc7368f4060dfdf3589ada8d62dd8a81">HexapodMove</a> next_move_)</td></tr>
<tr class="memdesc:a6b3997cbc4ff0c8a48582608a12fca8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">次の動作を設定する関数． <br  />
 深さを一つ深くして，親と次の動作を設定する．  <br /></td></tr>
<tr class="separator:a6b3997cbc4ff0c8a48582608a12fca8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1094abe8cb1ef6d6dcfb72bae3098ac5" id="r_a1094abe8cb1ef6d6dcfb72bae3098ac5"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_robot_state_nodedocs#a1094abe8cb1ef6d6dcfb72bae3098ac5">IsLootNode</a> () const</td></tr>
<tr class="memdesc:a1094abe8cb1ef6d6dcfb72bae3098ac5"><td class="mdescLeft">&#160;</td><td class="mdescRight">自身が根ノードであるか判定する．  <br /></td></tr>
<tr class="separator:a1094abe8cb1ef6d6dcfb72bae3098ac5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fa3f31f167ac1cf468d81509f55c407" id="r_a7fa3f31f167ac1cf468d81509f55c407"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_robot_state_nodedocs#a7fa3f31f167ac1cf468d81509f55c407">ToString</a> () const</td></tr>
<tr class="memdesc:a7fa3f31f167ac1cf468d81509f55c407"><td class="mdescLeft">&#160;</td><td class="mdescRight">ノードの情報を文字列に変換する関数． <br  />
 デバッグ用に詳細な情報を出力する．  <br /></td></tr>
<tr class="separator:a7fa3f31f167ac1cf468d81509f55c407"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47ae56615b2883c6a432a7eeacd73dfb" id="r_a47ae56615b2883c6a432a7eeacd73dfb"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_robot_state_nodedocs#a47ae56615b2883c6a432a7eeacd73dfb">ToCsvString</a> () const</td></tr>
<tr class="memdesc:a47ae56615b2883c6a432a7eeacd73dfb"><td class="mdescLeft">&#160;</td><td class="mdescRight">ノードの情報を csv形式の文字列に変換する関数． <br  />
 カンマ区切りで出力する．  <br /></td></tr>
<tr class="separator:a47ae56615b2883c6a432a7eeacd73dfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a239e46d06331efc15262d62d22d86833" id="r_a239e46d06331efc15262d62d22d86833"><td class="memItemLeft" align="right" valign="top"><a id="a239e46d06331efc15262d62d22d86833" name="a239e46d06331efc15262d62d22d86833"></a>
constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="structdesignlab_1_1_robot_state_nodedocs">RobotStateNode</a> &amp;other) const</td></tr>
<tr class="memdesc:a239e46d06331efc15262d62d22d86833"><td class="mdescLeft">&#160;</td><td class="mdescRight">比較演算子 <br /></td></tr>
<tr class="separator:a239e46d06331efc15262d62d22d86833"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ffe702b672986b7fa141778a9a4a938" id="r_a8ffe702b672986b7fa141778a9a4a938"><td class="memItemLeft" align="right" valign="top"><a id="a8ffe702b672986b7fa141778a9a4a938" name="a8ffe702b672986b7fa141778a9a4a938"></a>
constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator!=</b> (const <a class="el" href="structdesignlab_1_1_robot_state_nodedocs">RobotStateNode</a> &amp;other)</td></tr>
<tr class="separator:a8ffe702b672986b7fa141778a9a4a938"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
静的公開メンバ関数</h2></td></tr>
<tr class="memitem:a4a95df1683c834e25e22743d46f3d4d8" id="r_a4a95df1683c834e25e22743d46f3d4d8"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="structdesignlab_1_1_robot_state_nodedocs">RobotStateNode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_robot_state_nodedocs#a4a95df1683c834e25e22743d46f3d4d8">FromString</a> (const std::string &amp;str)</td></tr>
<tr class="memdesc:a4a95df1683c834e25e22743d46f3d4d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">文字列をノードの情報に変換する関数．  <br /></td></tr>
<tr class="separator:a4a95df1683c834e25e22743d46f3d4d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-attribs" name="pub-attribs"></a>
公開変数類</h2></td></tr>
<tr class="memitem:a368e1568eaff0a1b1f638b0628ee4fbb" id="r_a368e1568eaff0a1b1f638b0628ee4fbb"><td class="memItemLeft" align="right" valign="top"><a id="a368e1568eaff0a1b1f638b0628ee4fbb" name="a368e1568eaff0a1b1f638b0628ee4fbb"></a>
<a class="el" href="namespacedesignlab_1_1leg__funcdocs#aeed0147f934052f177c0761b75bacc65">leg_func::LegStateBit</a>&#160;</td><td class="memItemRight" valign="bottom"><b>leg_state</b></td></tr>
<tr class="memdesc:a368e1568eaff0a1b1f638b0628ee4fbb"><td class="mdescLeft">&#160;</td><td class="mdescRight">[4 byte] 脚状態，重心パターンを bitで表す．旧名 leg_con． <br /></td></tr>
<tr class="separator:a368e1568eaff0a1b1f638b0628ee4fbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18aa35bd423c669ed5e3ff36bf3877dc" id="r_a18aa35bd423c669ed5e3ff36bf3877dc"><td class="memItemLeft" align="right" valign="top"><a id="a18aa35bd423c669ed5e3ff36bf3877dc" name="a18aa35bd423c669ed5e3ff36bf3877dc"></a>
std::array&lt; <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>, <a class="el" href="classdesignlab_1_1_hexapod_constdocs#a8441e7e101e967ded7c357feb9670812">HexapodConst::kLegNum</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>leg_pos</b></td></tr>
<tr class="memdesc:a18aa35bd423c669ed5e3ff36bf3877dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">[4 * 3 * 6 = 72 byte] 脚先の座標．(coxa(脚の付け根)を原点とする) <br /></td></tr>
<tr class="separator:a18aa35bd423c669ed5e3ff36bf3877dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac426a784e4e15d038c94ecd3c611ff08" id="r_ac426a784e4e15d038c94ecd3c611ff08"><td class="memItemLeft" align="right" valign="top">std::array&lt; <a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>, <a class="el" href="classdesignlab_1_1_hexapod_constdocs#a8441e7e101e967ded7c357feb9670812">HexapodConst::kLegNum</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_robot_state_nodedocs#ac426a784e4e15d038c94ecd3c611ff08">leg_reference_pos</a></td></tr>
<tr class="separator:ac426a784e4e15d038c94ecd3c611ff08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f0441441995f133038743750bdc4eaa" id="r_a7f0441441995f133038743750bdc4eaa"><td class="memItemLeft" align="right" valign="top"><a id="a7f0441441995f133038743750bdc4eaa" name="a7f0441441995f133038743750bdc4eaa"></a>
<a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><b>center_of_mass_global_coord</b></td></tr>
<tr class="memdesc:a7f0441441995f133038743750bdc4eaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">[4 * 3 = 12byte] グローバル座標系における重心の位置．旧名 GCOM <br /></td></tr>
<tr class="separator:a7f0441441995f133038743750bdc4eaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ea7fddac931844d058129d1481b651a" id="r_a9ea7fddac931844d058129d1481b651a"><td class="memItemLeft" align="right" valign="top"><a id="a9ea7fddac931844d058129d1481b651a" name="a9ea7fddac931844d058129d1481b651a"></a>
<a class="el" href="structdesignlab_1_1_quaterniondocs">Quaternion</a>&#160;</td><td class="memItemRight" valign="bottom"><b>posture</b></td></tr>
<tr class="memdesc:a9ea7fddac931844d058129d1481b651a"><td class="mdescLeft">&#160;</td><td class="mdescRight">[4 * 4 = 16byte] 姿勢を表すクォータニオン． <br /></td></tr>
<tr class="separator:a9ea7fddac931844d058129d1481b651a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9fbc6f990c0579f5bb4e869412bad35" id="r_af9fbc6f990c0579f5bb4e869412bad35"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacedesignlabdocs#acc7368f4060dfdf3589ada8d62dd8a81">HexapodMove</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_robot_state_nodedocs#af9fbc6f990c0579f5bb4e869412bad35">next_move</a></td></tr>
<tr class="separator:af9fbc6f990c0579f5bb4e869412bad35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af69c94b8177124c5c61f642175b8c90d" id="r_af69c94b8177124c5c61f642175b8c90d"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structdesignlab_1_1_robot_state_nodedocs#af69c94b8177124c5c61f642175b8c90d">parent_index</a></td></tr>
<tr class="separator:af69c94b8177124c5c61f642175b8c90d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd8a880f8cc6cb4cd4a980ca388103ff" id="r_acd8a880f8cc6cb4cd4a980ca388103ff"><td class="memItemLeft" align="right" valign="top"><a id="acd8a880f8cc6cb4cd4a980ca388103ff" name="acd8a880f8cc6cb4cd4a980ca388103ff"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><b>depth</b></td></tr>
<tr class="memdesc:acd8a880f8cc6cb4cd4a980ca388103ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">[4 byte] 自身の深さ．一番上の親が深さ0となる． <br /></td></tr>
<tr class="separator:acd8a880f8cc6cb4cd4a980ca388103ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-attribs" name="pub-static-attribs"></a>
静的公開変数類</h2></td></tr>
<tr class="memitem:aa7544548abb588657ebbdc058a66bea1" id="r_aa7544548abb588657ebbdc058a66bea1"><td class="memItemLeft" align="right" valign="top"><a id="aa7544548abb588657ebbdc058a66bea1" name="aa7544548abb588657ebbdc058a66bea1"></a>
static constexpr int&#160;</td><td class="memItemRight" valign="bottom"><b>kNoParentIndex</b> = -1</td></tr>
<tr class="memdesc:aa7544548abb588657ebbdc058a66bea1"><td class="mdescLeft">&#160;</td><td class="mdescRight">親がいないことを表す値． <br /></td></tr>
<tr class="separator:aa7544548abb588657ebbdc058a66bea1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">詳解</h2>
<div class="textblock"><p>グラフ構造のためのノード(頂点)．旧名 LNODE </p>
<p>この構造体は，グラフ構造のためのノード(頂点)である． <br  />
 ノードは，脚の状態，脚先の座標，脚接地の基準点の座標，重心の位置， ロールピッチヨーの回転角度，親ノードの番号，次の動作，深さを持つ． <br  />
 すなわちロボットの現在の状態を表している． しかし，脚の関節角度など一部の情報を持ってはいない． <br  />
 これは実時間内に，グラフ探索を終えるための工夫である． <br  />
 先行研究のプログラムに比べて大きく内容を変更したが， 基本的な構造は同じである． また，ロボットの座標系は通例，進行方向をXの正，ロボットの真上をZの正， y軸は右手座標系でとる． このプログラムもそのように統一する． <br  />
 過去のプログラムではそれがバラバラになっていたため， 途中で座標系を変換する処理が多々あったが， 煩雑なうえ，時間がかかるので，全て統一する． </p>
</div><h2 class="groupheader">関数詳解</h2>
<a id="a28bedf0298ebf8f315a21294dd111f45" name="a28bedf0298ebf8f315a21294dd111f45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28bedf0298ebf8f315a21294dd111f45">&#9670;&#160;</a></span>ChangeGlobalCenterOfMass()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void designlab::RobotStateNode::ChangeGlobalCenterOfMass </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_vector3docs">designlab::Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>new_com</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>do_change_leg_base_pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>重心位置を変更する関数． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">new_com</td><td>新しい重心位置．グローバル座標系． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">do_change_leg_base_pos</td><td>遊脚中の脚の接地基準地点の座標を変更するかどうか</td></tr>
  </table>
  </dd>
</dl>
<p>脚位置は脚の付け根からの相対座標で表現されている． <br  />
 遊脚している脚は一緒に移動するが， 接地脚は移動しないため座標を変更してやる必要がある． </p>
<div class="dynheader">
呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_robot_state_node_a28bedf0298ebf8f315a21294dd111f45_cgraph.png" border="0" usemap="#astructdesignlab_1_1_robot_state_node_a28bedf0298ebf8f315a21294dd111f45_cgraph" alt=""/></div>
<map name="astructdesignlab_1_1_robot_state_node_a28bedf0298ebf8f315a21294dd111f45_cgraph" id="astructdesignlab_1_1_robot_state_node_a28bedf0298ebf8f315a21294dd111f45_cgraph">
<area shape="rect" title="重心位置を変更する関数．" alt="" coords="5,72,199,115"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs#a893ee3dc143f059822f17ead2f716de1" title="クォータニオンの共役を返す． 共役なクォータニオンとは，ベクトル成分の符号を反転させたもの &#160;&#160;q = w + xi + yj + zk とすると， qの共役は w &#45; xi &#45; yj &#45; zk となる..." alt="" coords="257,5,404,48"/>
<area shape="poly" title=" " alt="" coords="176,69,241,50,242,55,178,74"/>
<area shape="rect" href="namespacedesignlab_1_1leg__funcdocs#a4b87ebe130ffec4a53e929bdb13c4ee3" title="脚番号 leg_index 0 ～ 5 に応じて，その脚が接地しているかを調べる． &#160;&#160;脚は右前脚を0番として，時計回りに0,1,2,3,4,5となる．左前足が5番．" alt="" coords="264,72,397,115"/>
<area shape="poly" title=" " alt="" coords="199,91,249,91,249,96,199,96"/>
<area shape="rect" href="namespacedesignlabdocs#a703ec0b7e06057a8997a4b22d50c5c9d" title="回転させたベクトルを返す．三角関数の処理が多く重たいので注意．" alt="" coords="247,163,414,189"/>
<area shape="poly" title=" " alt="" coords="164,113,277,154,276,159,162,118"/>
<area shape="poly" title=" " alt="" coords="293,164,286,154,291,144,306,138,330,136,357,139,371,145,369,150,355,144,330,141,307,143,294,148,291,153,297,161"/>
<area shape="rect" href="namespacedesignlabdocs#a8183abef6391dd2b5c396f1fa3062294" title="クォータニオンから回転角行列への変換．" alt="" coords="462,163,644,189"/>
<area shape="poly" title=" " alt="" coords="414,173,446,173,446,179,414,179"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs#a2c504d31353e189b1fa7a83cfd60deba" title="正規化したクォータニオンを返す． &#160;&#160;クォータニオンの正規化とは，ノルムを1にすることを表す． &#160;&#160;クォータニオンqの正規化は，q / |q| で求められる．" alt="" coords="692,155,840,197"/>
<area shape="poly" title=" " alt="" coords="645,173,677,173,677,179,645,179"/>
</map>
</div>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_robot_state_node_a28bedf0298ebf8f315a21294dd111f45_icgraph.png" border="0" usemap="#astructdesignlab_1_1_robot_state_node_a28bedf0298ebf8f315a21294dd111f45_icgraph" alt=""/></div>
<map name="astructdesignlab_1_1_robot_state_node_a28bedf0298ebf8f315a21294dd111f45_icgraph" id="astructdesignlab_1_1_robot_state_node_a28bedf0298ebf8f315a21294dd111f45_icgraph">
<area shape="rect" title="重心位置を変更する関数．" alt="" coords="237,72,430,115"/>
<area shape="rect" href="classdesignlab_1_1_node_creator_com_movedocs#a3fc5ccbce7199f0c7a7ce9ca5f4c221a" title="現在のノードから次のノード群を生成する．" alt="" coords="5,5,189,48"/>
<area shape="poly" title=" " alt="" coords="240,70,175,51,176,46,241,65"/>
<area shape="rect" href="classdesignlab_1_1_node_creator_com_move_straightdocs#a3e2fd67280dd581a695a09cea4f816a4" title="現在のノードから次のノード群を生成する．" alt="" coords="5,72,189,115"/>
<area shape="poly" title=" " alt="" coords="221,96,189,96,189,91,221,91"/>
<area shape="rect" href="classdesignlab_1_1_node_initializerdocs#a717aea9fc00fcb51c5ba3518fac717fc" title="地形に適した初期姿勢を設定する．" alt="" coords="14,139,180,181"/>
<area shape="poly" title=" " alt="" coords="241,122,176,141,175,135,240,117"/>
</map>
</div>

</div>
</div>
<a id="a73efce324f3ffd5ead5fbc663acd96a2" name="a73efce324f3ffd5ead5fbc663acd96a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73efce324f3ffd5ead5fbc663acd96a2">&#9670;&#160;</a></span>ChangePosture()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void designlab::RobotStateNode::ChangePosture </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; const <a class="el" href="classdesignlab_1_1_i_hexapod_coordinate_converterdocs">IHexapodCoordinateConverter</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>converter_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structdesignlab_1_1_quaterniondocs">designlab::Quaternion</a> &amp;&#160;</td>
          <td class="paramname"><em>new_posture</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>クォータニオンを変更し，胴体を回転させる関数． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">converter_ptr</td><td>座標変換クラスのポインタ． </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">new_posture</td><td>新しい姿勢．単位クォータニオン． </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_robot_state_node_a73efce324f3ffd5ead5fbc663acd96a2_cgraph.png" border="0" usemap="#astructdesignlab_1_1_robot_state_node_a73efce324f3ffd5ead5fbc663acd96a2_cgraph" alt=""/></div>
<map name="astructdesignlab_1_1_robot_state_node_a73efce324f3ffd5ead5fbc663acd96a2_cgraph" id="astructdesignlab_1_1_robot_state_node_a73efce324f3ffd5ead5fbc663acd96a2_cgraph">
<area shape="rect" title="クォータニオンを変更し，胴体を回転させる関数．" alt="" coords="5,72,185,115"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs#a893ee3dc143f059822f17ead2f716de1" title="クォータニオンの共役を返す． 共役なクォータニオンとは，ベクトル成分の符号を反転させたもの &#160;&#160;q = w + xi + yj + zk とすると， qの共役は w &#45; xi &#45; yj &#45; zk となる..." alt="" coords="243,5,390,48"/>
<area shape="poly" title=" " alt="" coords="167,69,228,50,229,56,169,74"/>
<area shape="rect" href="namespacedesignlab_1_1leg__funcdocs#a4b87ebe130ffec4a53e929bdb13c4ee3" title="脚番号 leg_index 0 ～ 5 に応じて，その脚が接地しているかを調べる． &#160;&#160;脚は右前脚を0番として，時計回りに0,1,2,3,4,5となる．左前足が5番．" alt="" coords="250,72,383,115"/>
<area shape="poly" title=" " alt="" coords="185,91,235,91,235,96,185,96"/>
<area shape="rect" href="namespacedesignlabdocs#a703ec0b7e06057a8997a4b22d50c5c9d" title="回転させたベクトルを返す．三角関数の処理が多く重たいので注意．" alt="" coords="233,163,400,189"/>
<area shape="poly" title=" " alt="" coords="155,113,265,154,263,159,153,118"/>
<area shape="poly" title=" " alt="" coords="279,164,272,154,277,144,292,138,316,136,343,139,357,145,354,150,341,144,316,141,293,143,280,148,278,153,283,161"/>
<area shape="rect" href="namespacedesignlabdocs#a8183abef6391dd2b5c396f1fa3062294" title="クォータニオンから回転角行列への変換．" alt="" coords="448,163,630,189"/>
<area shape="poly" title=" " alt="" coords="400,173,432,173,432,179,400,179"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs#a2c504d31353e189b1fa7a83cfd60deba" title="正規化したクォータニオンを返す． &#160;&#160;クォータニオンの正規化とは，ノルムを1にすることを表す． &#160;&#160;クォータニオンqの正規化は，q / |q| で求められる．" alt="" coords="678,155,826,197"/>
<area shape="poly" title=" " alt="" coords="631,173,663,173,663,179,631,179"/>
</map>
</div>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_robot_state_node_a73efce324f3ffd5ead5fbc663acd96a2_icgraph.png" border="0" usemap="#astructdesignlab_1_1_robot_state_node_a73efce324f3ffd5ead5fbc663acd96a2_icgraph" alt=""/></div>
<map name="astructdesignlab_1_1_robot_state_node_a73efce324f3ffd5ead5fbc663acd96a2_icgraph" id="astructdesignlab_1_1_robot_state_node_a73efce324f3ffd5ead5fbc663acd96a2_icgraph">
<area shape="rect" title="クォータニオンを変更し，胴体を回転させる関数．" alt="" coords="240,5,419,48"/>
<area shape="rect" href="classdesignlab_1_1_node_creator_body_rotdocs#a162277203f0422a351c4d24e8167d43d" title="現在のノードから次のノード群を生成する．" alt="" coords="5,5,192,48"/>
<area shape="poly" title=" " alt="" coords="224,29,192,29,192,24,224,24"/>
</map>
</div>

</div>
</div>
<a id="a6b3997cbc4ff0c8a48582608a12fca8e" name="a6b3997cbc4ff0c8a48582608a12fca8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b3997cbc4ff0c8a48582608a12fca8e">&#9670;&#160;</a></span>ChangeToNextNode()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void designlab::RobotStateNode::ChangeToNextNode </td>
          <td>(</td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>parent_index_</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacedesignlabdocs#acc7368f4060dfdf3589ada8d62dd8a81">HexapodMove</a>&#160;</td>
          <td class="paramname"><em>next_move_</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>次の動作を設定する関数． <br  />
 深さを一つ深くして，親と次の動作を設定する． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">parent_index_</td><td>親ノードの番号. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">next_move_</td><td>次の動作． </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_robot_state_node_a6b3997cbc4ff0c8a48582608a12fca8e_icgraph.png" border="0" usemap="#astructdesignlab_1_1_robot_state_node_a6b3997cbc4ff0c8a48582608a12fca8e_icgraph" alt=""/></div>
<map name="astructdesignlab_1_1_robot_state_node_a6b3997cbc4ff0c8a48582608a12fca8e_icgraph" id="astructdesignlab_1_1_robot_state_node_a6b3997cbc4ff0c8a48582608a12fca8e_icgraph">
<area shape="rect" title="次の動作を設定する関数． &#160;&#160;深さを一つ深くして，親と次の動作を設定する．" alt="" coords="240,205,419,248"/>
<area shape="rect" href="classdesignlab_1_1_node_creator_leg_up_downdocs#a861b8e2c2efd6673f70c53881848d442" title="現在のノードから次のノード群を生成する．" alt="" coords="10,5,187,48"/>
<area shape="poly" title=" " alt="" coords="306,194,258,127,226,92,190,62,171,51,173,46,193,58,230,89,262,124,310,191"/>
<area shape="rect" href="classdesignlab_1_1_node_creator_leg_up_down2ddocs#a06c92f273cd957c7108ae2632bcd8339" title="現在のノードから次のノード群を生成する．" alt="" coords="10,72,187,115"/>
<area shape="poly" title=" " alt="" coords="290,197,243,162,190,129,166,118,168,113,193,124,247,158,293,193"/>
<area shape="rect" href="classdesignlab_1_1_node_creator_leg_up_down_radiusdocs#a4d2c69510f3b456ce4cb21c2a58e9b45" title="現在のノードから次のノード群を生成する．" alt="" coords="10,139,187,181"/>
<area shape="poly" title=" " alt="" coords="238,203,174,185,176,179,240,198"/>
<area shape="rect" href="classdesignlab_1_1_node_creator_leg_hierarchydocs#ade5f7af05493084aaca057a4f543ebb7" title="現在のノードから次のノード群を生成する．" alt="" coords="10,205,187,248"/>
<area shape="poly" title=" " alt="" coords="224,229,188,229,188,224,224,224"/>
<area shape="rect" href="classdesignlab_1_1_node_creator_body_rotdocs#a162277203f0422a351c4d24e8167d43d" title="現在のノードから次のノード群を生成する．" alt="" coords="5,272,192,315"/>
<area shape="poly" title=" " alt="" coords="240,255,176,274,174,269,238,250"/>
<area shape="rect" href="classdesignlab_1_1_node_creator_com_movedocs#a3fc5ccbce7199f0c7a7ce9ca5f4c221a" title="現在のノードから次のノード群を生成する．" alt="" coords="7,339,190,381"/>
<area shape="poly" title=" " alt="" coords="293,260,247,295,193,329,168,341,166,336,190,324,243,291,290,256"/>
<area shape="rect" href="classdesignlab_1_1_node_creator_com_move_straightdocs#a3e2fd67280dd581a695a09cea4f816a4" title="現在のノードから次のノード群を生成する．" alt="" coords="7,405,190,448"/>
<area shape="poly" title=" " alt="" coords="310,262,262,329,230,365,193,396,173,407,171,403,190,391,226,361,258,326,306,259"/>
</map>
</div>

</div>
</div>
<a id="a4a95df1683c834e25e22743d46f3d4d8" name="a4a95df1683c834e25e22743d46f3d4d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a95df1683c834e25e22743d46f3d4d8">&#9670;&#160;</a></span>FromString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structdesignlab_1_1_robot_state_nodedocs">RobotStateNode</a> designlab::RobotStateNode::FromString </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>文字列をノードの情報に変換する関数． </p>
<dl class="params"><dt>引数</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>ノードの情報をまとめた文字列，カンマ区切り． </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>戻り値</dt><dd>ロボットの状態を表すノード． </dd></dl>
<dl class="todo"><dt><b><a class="el" href="tododocs#_todo000013">todo:</a></b></dt><dd>うまく読み込めなかった時の処理を書く． </dd></dl>

</div>
</div>
<a id="a1094abe8cb1ef6d6dcfb72bae3098ac5" name="a1094abe8cb1ef6d6dcfb72bae3098ac5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1094abe8cb1ef6d6dcfb72bae3098ac5">&#9670;&#160;</a></span>IsLootNode()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool designlab::RobotStateNode::IsLootNode </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>自身が根ノードであるか判定する． </p>
<dl class="retval"><dt>戻り値</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>自身が根ノードである． </td></tr>
    <tr><td class="paramname">false</td><td>自身が根ノードでない． </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_robot_state_node_a1094abe8cb1ef6d6dcfb72bae3098ac5_icgraph.png" border="0" usemap="#astructdesignlab_1_1_robot_state_node_a1094abe8cb1ef6d6dcfb72bae3098ac5_icgraph" alt=""/></div>
<map name="astructdesignlab_1_1_robot_state_node_a1094abe8cb1ef6d6dcfb72bae3098ac5_icgraph" id="astructdesignlab_1_1_robot_state_node_a1094abe8cb1ef6d6dcfb72bae3098ac5_icgraph">
<area shape="rect" title="自身が根ノードであるか判定する．" alt="" coords="292,39,471,81"/>
<area shape="rect" href="classdesignlab_1_1_gait_pattern_generator_basicdocs#a3b957e224a453c5fc85bd15684560043" title="グラフ探索を行い，次の動作として最適なノードを返す．" alt="" coords="8,5,241,48"/>
<area shape="poly" title=" " alt="" coords="276,49,241,44,241,39,276,44"/>
<area shape="rect" href="classdesignlab_1_1_gait_pattern_generator_threaddocs#af6729bdafbd310f762733e7fa10f8df5" title="グラフ探索を行い，次の動作として最適なノードを返す．" alt="" coords="5,72,244,115"/>
<area shape="poly" title=" " alt="" coords="276,76,245,80,244,75,276,71"/>
</map>
</div>

</div>
</div>
<a id="a47ae56615b2883c6a432a7eeacd73dfb" name="a47ae56615b2883c6a432a7eeacd73dfb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47ae56615b2883c6a432a7eeacd73dfb">&#9670;&#160;</a></span>ToCsvString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string designlab::RobotStateNode::ToCsvString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>ノードの情報を csv形式の文字列に変換する関数． <br  />
 カンマ区切りで出力する． </p>
<dl class="section return"><dt>戻り値</dt><dd>ノードの情報を csv形式の文字列にしたもの． </dd></dl>

</div>
</div>
<a id="a7fa3f31f167ac1cf468d81509f55c407" name="a7fa3f31f167ac1cf468d81509f55c407"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7fa3f31f167ac1cf468d81509f55c407">&#9670;&#160;</a></span>ToString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string designlab::RobotStateNode::ToString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>ノードの情報を文字列に変換する関数． <br  />
 デバッグ用に詳細な情報を出力する． </p>
<dl class="section return"><dt>戻り値</dt><dd>ノードの情報を文字列にしたもの． </dd></dl>
<div class="dynheader">
呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_robot_state_node_a7fa3f31f167ac1cf468d81509f55c407_cgraph.png" border="0" usemap="#astructdesignlab_1_1_robot_state_node_a7fa3f31f167ac1cf468d81509f55c407_cgraph" alt=""/></div>
<map name="astructdesignlab_1_1_robot_state_node_a7fa3f31f167ac1cf468d81509f55c407_cgraph" id="astructdesignlab_1_1_robot_state_node_a7fa3f31f167ac1cf468d81509f55c407_cgraph">
<area shape="rect" title="ノードの情報を文字列に変換する関数． &#160;&#160;デバッグ用に詳細な情報を出力する．" alt="" coords="5,139,185,181"/>
<area shape="rect" href="namespacedesignlab_1_1leg__funcdocs#a97269d1d2e67a17e729889089a859b78" title="現在の脚状態から重心パターンを取得する．" alt="" coords="233,5,381,48"/>
<area shape="poly" title=" " alt="" coords="121,136,171,98,231,58,240,53,242,58,234,62,174,102,124,141"/>
<area shape="rect" href="namespacedesignlab_1_1leg__funcdocs#ab7617bec21b4f953dc3b4641f58a0e2e" title="脚状態を取得する．" alt="" coords="236,72,378,115"/>
<area shape="poly" title=" " alt="" coords="164,136,221,117,223,122,166,141"/>
<area shape="rect" href="namespacedesignlab_1_1leg__funcdocs#a4b87ebe130ffec4a53e929bdb13c4ee3" title="脚番号 leg_index 0 ～ 5 に応じて，その脚が接地しているかを調べる． &#160;&#160;脚は右前脚を0番として，時計回りに0,1,2,3,4,5となる．左前足が5番．" alt="" coords="241,139,373,181"/>
<area shape="poly" title=" " alt="" coords="185,157,225,157,225,163,185,163"/>
<area shape="rect" href="structdesignlab_1_1_quaterniondocs#a37c43da43484613d050d79393feaecec" title="クォータニオンを文字列に変換する． &#160;&#160;w, x, y, z の順で出力する．" alt="" coords="233,205,381,248"/>
<area shape="poly" title=" " alt="" coords="166,179,223,198,221,203,164,184"/>
<area shape="rect" href="structdesignlab_1_1_vector3docs#adced04a30051a7d7a5845a1d9a9d1c11" title="このベクトルを文字列にして返す． &#160;&#160;(x, y, z) の形式，小数点以下3桁まで．" alt="" coords="242,272,372,315"/>
<area shape="poly" title=" " alt="" coords="124,179,174,218,234,258,242,262,240,267,231,262,171,222,121,184"/>
<area shape="rect" href="namespacedesignlab_1_1math__utildocs#a45276ca396d3aa1331b5bb5a4c849bbe" title="小数を文字列に変換する関数． &#160;&#160;C++ では C のフォーマットのように %3.3f とかで小数を文字列に変換できないため自作する．" alt="" coords="429,239,609,281"/>
<area shape="poly" title=" " alt="" coords="381,236,414,241,413,246,380,241"/>
<area shape="poly" title=" " alt="" coords="371,281,413,274,414,279,372,286"/>
</map>
</div>
<div class="dynheader">
被呼び出し関係図:</div>
<div class="dyncontent">
<div class="center"><img src="structdesignlab_1_1_robot_state_node_a7fa3f31f167ac1cf468d81509f55c407_icgraph.png" border="0" usemap="#astructdesignlab_1_1_robot_state_node_a7fa3f31f167ac1cf468d81509f55c407_icgraph" alt=""/></div>
<map name="astructdesignlab_1_1_robot_state_node_a7fa3f31f167ac1cf468d81509f55c407_icgraph" id="astructdesignlab_1_1_robot_state_node_a7fa3f31f167ac1cf468d81509f55c407_icgraph">
<area shape="rect" title="ノードの情報を文字列に変換する関数． &#160;&#160;デバッグ用に詳細な情報を出力する．" alt="" coords="272,39,451,81"/>
<area shape="rect" href="classdesignlab_1_1_system_main_graph_viewerdocs#a19d272521cd15d5e493e24ef5834c218" title="主要な処理を行う関数．" alt="" coords="18,5,211,48"/>
<area shape="poly" title=" " alt="" coords="256,48,211,42,212,37,257,43"/>
<area shape="rect" href="classdesignlab_1_1_system_main_simulationdocs#ab3579cf4bfec29b735c2c2c70b19e738" title="いままで int mainで行われた処理をまとめたもの． &#160;&#160;目標地点へ着くか，歩容計画に失敗した場合に，シミュレーションを終える． &#160;&#160;また，規定の回数シミュレーションしたら終了する．" alt="" coords="5,72,224,115"/>
<area shape="poly" title=" " alt="" coords="257,77,225,81,224,76,256,72"/>
</map>
</div>

</div>
</div>
<h2 class="groupheader">メンバ詳解</h2>
<a id="ac426a784e4e15d038c94ecd3c611ff08" name="ac426a784e4e15d038c94ecd3c611ff08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac426a784e4e15d038c94ecd3c611ff08">&#9670;&#160;</a></span>leg_reference_pos</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;<a class="el" href="structdesignlab_1_1_vector3docs">Vector3</a>, <a class="el" href="classdesignlab_1_1_hexapod_constdocs#a8441e7e101e967ded7c357feb9670812">HexapodConst::kLegNum</a>&gt; designlab::RobotStateNode::leg_reference_pos</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>[4 * 3 * 6 = 72 byte] 脚接地の基準点の座標． 離散化した時に4になる地点．(coxa(脚の付け根)を原点とする) </p>

</div>
</div>
<a id="af9fbc6f990c0579f5bb4e869412bad35" name="af9fbc6f990c0579f5bb4e869412bad35"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9fbc6f990c0579f5bb4e869412bad35">&#9670;&#160;</a></span>next_move</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacedesignlabdocs#acc7368f4060dfdf3589ada8d62dd8a81">HexapodMove</a> designlab::RobotStateNode::next_move</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>[4 byte] 次の動作を代入する． 元のプログラムでは int debug が担っていた仕事を行う． </p>

</div>
</div>
<a id="af69c94b8177124c5c61f642175b8c90d" name="af69c94b8177124c5c61f642175b8c90d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af69c94b8177124c5c61f642175b8c90d">&#9670;&#160;</a></span>parent_index</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int designlab::RobotStateNode::parent_index</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>[4 byte] 自身の親が vector 配列のどこにいるのかを記録する． 親がいないなら負の値をとる． </p>

</div>
</div>
<hr/>この構造体詳解は次のファイルから抽出されました:<ul>
<li>C:/Users/hasegawa/Desktop/main/program/gait-generation-by-graph-search/DesignLab/<a class="el" href="robot__state__node_8h_sourcedocs">robot_state_node.h</a></li>
<li>C:/Users/hasegawa/Desktop/main/program/gait-generation-by-graph-search/DesignLab/<b>robot_state_node.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacedesignlabdocs">designlab</a></li><li class="navelem"><a class="el" href="structdesignlab_1_1_robot_state_nodedocs">RobotStateNode</a></li>
    <li class="footer">構築: <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
